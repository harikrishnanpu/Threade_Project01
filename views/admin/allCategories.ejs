<section class="table-components">
  <div class="container-fluid">
    <!-- Loading overlay -->
    <div class="loading-overlay" id="loading-overlay">
      <div class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading...</p>
      </div>
    </div>

    <div class="tables-wrapper">
      <div class="card-style mb-30">
        <div class="page-header">
          <h6 class="page-title">Category Management</h6>
          <div class="header-stats">
            <span class="stat-item">
              Showing: <span id="result-count"><%= categories.length %></span> / <span id="total-count"><%= totalCategories %></span>
            </span>
          </div>
        </div>
        
        <p class="error-msg" id="error-msg"></p>
        <p class="success-msg" id="success-msg"></p>
        
        <div class="table-controls">
          <div class="controls-row">

            <div class="filters-section">
              <div class="filter-group">
                <label class="filter-label">Status:</label>
                <select class="filter form-select" id="status-filter">
                  <option value="all" <%= status==='all' ? 'selected' : '' %>>All Categories</option>
                  <option value="active" <%= status==='active' ? 'selected' : '' %>>Active</option>
                  <option value="inactive" <%= status==='inactive' ? 'selected' : '' %>>Inactive</option>
                </select>
              </div>

              <div class="filter-group">
                <label class="filter-label">Type:</label>
                <select class="filter form-select" id="parent-filter">
                  <option value="all" <%= parentFilter==='all' ? 'selected' : '' %>>All Types</option>
                  <option value="main" <%= parentFilter==='main' ? 'selected' : '' %>>Main Categories</option>
                  <option value="sub" <%= parentFilter==='sub' ? 'selected' : '' %>>Subcategories</option>
                </select>
              </div>
            </div>
            
            <div class="toggle-group">
              <label class="toggle-switch">
                <input type="checkbox" id="show-inactive" <%= showInactive == 'true' ? 'checked' : '' %>>
                <span class="toggle-slider"></span>
                <span class="toggle-label"> Inactive </span>
              </label>
            </div>

            <div class="search-section">
              <form class="search-form" id="search-form">
                <div class="search-input-group">
                  <input type="text"
                         id="search-input"
                         name="search"
                         class="form-control search-input"
                         placeholder="Search categories..."
                         value="<%= search || '' %>">
                  <button type="submit" class="btn btn-primary search-btn">
                    <i class="lni lni-search"></i>
                  </button>
                </div>
              </form>
            </div>

            <div class="sort-section">
              <div class="sort-group">
                <label class="sort-label">Sort by:</label>
                <select class="sort-field form-select" id="sort-field">
                  <option value="name" <%= sortField==='name' ? 'selected' : '' %>>Name</option>
                  <option value="createdAt" <%= sortField==='createdAt' ? 'selected' : '' %>>Created Date</option>
                </select>
                
                <button class="btn btn-outline-secondary sort-order-btn" id="sort-order" type="button">
                  <span class="sort-icon"><%= sortOrder==='asc' ? '↑' : '↓' %></span>
                </button>
              </div>
            </div>

            <!-- Actions -->
            <div class="actions-section">
              <button class="btn btn-secondary reset-btn" id="reset-filters" type="button">
                <i class="lni lni-reload"></i>
                <span class="btn-text">Reset</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Pagination Navigator -->
        <div class="table-navigator">
          <button class="btn btn-primary" onclick="openCategoryModal('create')">
            <i class="lni lni-plus"></i>
            <span class="btn-text">Add Category</span>
          </button>
          
          <div class="pagination-controls">
            <button class="btn btn-outline-primary nav-btn" 
                    id="prev-btn"
                    <%= currentPage<=1 ? 'disabled' : '' %>
                    onclick="goToPage(<%= currentPage-1 %>)">
              <i class="lni lni-chevron-left"></i>
              <span class="btn-text">Prev</span>
            </button>
            
            <div class="page-info">
              <span class="page-label">Page</span>
              <input type="number" 
                     min="1" 
                     max="<%= totalPages %>"
                     id="page-number"
                     class="page-input" 
                     value="<%= currentPage %>"
                     onchange="goToPage(this.value)" />
              <span class="page-total">of <%= totalPages %></span>
            </div>
            
            <button class="btn btn-outline-primary nav-btn" 
                    id="next-btn"
                    <%= currentPage>=totalPages ? 'disabled' : '' %>
                    onclick="goToPage(<%= currentPage+1 %>)">
              <span class="btn-text">Next</span>
              <i class="lni lni-chevron-right"></i>
            </button>
          </div>
        </div>

        <!-- Table -->
        <div class="table-wrapper">
          <div class="table-container">
            <table class="table" id="categories-table">
              <% if (categories && categories.length > 0) { %>
              <thead>
                <tr>
                  <th class="sortable-header" onclick="setSortField('name')">
                    <div class="header-content">
                      <span>Category Name</span>
                      <% if (sortField === 'name') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th>Description</th>
                  <th>Parent Category</th>
                  <th>Status</th>
                  <th class="sortable-header" onclick="setSortField('createdAt')">
                    <div class="header-content">
                      <span>Created Date</span>
                      <% if (sortField === 'createdAt') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th class="actions-header">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% categories.forEach((category) => { %>
                <tr class="category-row <%= !category.isActive && 'unlisted-category' %>" data-category-id="<%= category._id %>">
                  <td class="category-name">
                    <div class="category-info">
                      <span class="name <%= category.isFeatured ? 'featured-category' : '' %>">
                        <%= category.name %>
                        <% if (category.isFeatured) { %>
                          <i class="lni lni-star-filled featured-icon" title="Featured"></i>
                        <% } %>
                      </span>
                    </div>
                  </td>
                  <td class="category-description">
                    <% if (category.description) { %>
                      <%= category.description.substring(0, 100) %><%= category.description.length > 100 ? '...' : '' %>
                    <% } else { %>
                      <span class="text-muted">No description</span>
                    <% } %>
                  </td>
                  <td class="parent-category">
                    <% if (category.parentCategory) { %>
                      <span class="parent-name"><%= category.parentCategory.name %></span>
                    <% } else { %>
                      <span class="main-category-badge">Main Category</span>
                    <% } %>
                  </td>
                  <td class="category-status">
                    <div class="status-badges">
                      <span class="status-badge <%= category.isActive ? 'active' : 'blocked' %>">
                        <%= category.isActive ? 'Active' : 'Inactive' %>
                      </span>
                    </div>
                  </td>
                  <td class="category-created">
                    <span class="date-text">
                      <%= category.createdAt ? new Date(category.createdAt).toLocaleDateString() : 'N/A' %>
                    </span>
                  </td>
                  <td class="category-actions">
                    <div class="action-buttons">
                      <button class="btn btn-sm btn-outline-primary edit-btn" 
                              onclick="openCategoryModal('edit', '<%= category._id %>')"
                              title="Edit Category">
                        <i class="lni lni-pencil"></i>
                        <span class="btn-text">Edit</span>
                      </button>

                      <button class="btn btn-sm  <%= category.isActive ? 'btn-outline-danger' : 'btn-outline-success'  %> toggle-status-btn" 
                              onclick="toggleStatus('<%= category._id %>', '<%= category.name %>', '<%= category.isActive %>')"
                              title="<%= category.isActive ? 'Deactivate' : 'Activate' %> Category">
                        <i class="lni lni-<%= category.isActive ? 'lock' : 'unlock' %>"></i>
                        <span class="btn-text"><%= category.isActive ? 'Deactivate' : 'Activate' %></span>
                      </button>
                      
                    </div>
                  </td>
                </tr>
                <% }) %>
              </tbody>
              <% } else { %>
              <tbody>
                <tr class="no-data-row">
                  <td colspan="6" class="no-data-cell">
                    <div class="no-data-content">
                      <div class="no-data-icon">
                        <i class="lni lni-layers"></i>
                      </div>
                      <p>No categories found</p>
                      <% if (search || status !== 'all' || parentFilter !== 'all' || showFeatured) { %>
                        <button class="btn btn-link" onclick="resetFilters()">Clear filters</button>
                      <% } else { %>
                        <button class="btn btn-primary" onclick="openCategoryModal('create')">
                          <i class="lni lni-plus"></i>
                          Create First Category
                        </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
              </tbody>
              <% } %>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<div class="modal-overlay" id="confirm-modal-overlay">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="confirm-modal-title">Confirm Action</h5>
      <button class="modal-close" onclick="closeConfirmModal()" aria-label="Close">
        <i class="lni lni-close"></i>
      </button>
    </div>
    <div class="modal-body">
      <p id="confirm-modal-message">Are you sure you want to perform this action?</p>
    </div>
    <div class="modal-footer">
      <button class="btn btn-secondary" onclick="closeConfirmModal()">Cancel</button>
      <button class="btn btn-danger" id="confirm-modal-confirm" onclick="confirmAction()">Confirm</button>
    </div>
  </div>
</div>

<!-- Category Form Modal -->
<div class="modal-overlay" id="category-modal-overlay">
  <div class="modal-content modal-lg">
    <div class="modal-header">
      <h5 class="modal-title" id="category-modal-title">Add Category</h5>
      <button class="modal-close" onclick="closeCategoryModal()" aria-label="Close">
        <i class="lni lni-close"></i>
      </button>
    </div>
    <form id="category-form">
      <div class="modal-body">
        <div class="form-row mt-2">
          <div class="form-group">
            <label for="category-name" class="form-label">Category Name <span class="required">*</span></label>
            <input type="text" 
                   id="category-name" 
                   name="name" 
                   class="form-control" 
                   placeholder="Enter category name"
                   required>
            <div class="form-error" id="name-error"></div>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="category-description" class="form-label">Description</label>
            <textarea id="category-description" 
                      name="description" 
                      class="form-control" 
                      rows="3"
                      placeholder="Enter category description (optional)"></textarea>
            <div class="form-error" id="description-error"></div>
          </div>
        </div>

        <div class="form-row mt-2">
<div class="form-group">
  <label for="parent-category" class="form-label">Parent Category</label>

  <select id="parent-category" name="parentCategory" class="form-control">
    <option value="">Select parent category (optional)</option>

  </select>
  <div class="form-error" id="parent-error"></div>
</div>

        </div>

        <div class="form-row mt-2 flex">
          <div class="form-group-inline">
            <div class="checkbox-group">
              <label class="checkbox-label">
                <input type="checkbox" id="category-active" name="isActive" checked>
                <span class="checkbox-custom"></span>
                <span class="checkbox-text">Active</span>
              </label>
            </div>

            <div class="checkbox-group">
              <label class="checkbox-label">
                <input type="checkbox" id="category-featured" name="isFeatured">
                <span class="checkbox-custom"></span>
                <span class="checkbox-text">Featured</span>
              </label>
            </div>
          </div>
        </div>

        <input type="hidden" id="category-id" name="id">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" onclick="closeCategoryModal()">Cancel</button>
        <button type="submit" class="btn btn-primary" id="category-submit-btn">
          <span class="btn-spinner" id="category-spinner" style="display: none;">
            <i class="lni lni-spinner-arrow"></i>
          </span>
          <span id="category-submit-text">Save Category</span>
        </button>
      </div>
    </form>
  </div>
</div>

<style>
/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  max-width: 500px;
  width: 90%;
  max-height: 90vh;
  overflow: hidden;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.modal-content.modal-lg {
  max-width: 600px;
}

.modal-overlay.active .modal-content {
  transform: scale(1);
}

.modal-header {
  padding: 20px 24px;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #f8f9fa;
}

.modal-title {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #212529;
}

.modal-close {
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: #6c757d;
  padding: 4px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.3s ease;
}

.modal-close:hover {
  background: #e9ecef;
  color: #495057;
}

.modal-body {
  padding: 24px;
  max-height: 60vh;
  overflow-y: auto;
}

.modal-footer {
  padding: 16px 24px;
  border-top: 1px solid #e9ecef;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  background: #f8f9fa;
}


</style>

<script>
  const BASE_URL = window.location.origin;
  
  const STATE = {
    page: parseInt('<%= currentPage %>') || 1,
    status: '<%= status %>' || 'all',
    parentFilter: '<%= parentFilter %>' || 'all',
    sortField: '<%= sortField %>' || 'createdAt',
    sortOrder: '<%= sortOrder %>' || 'desc',
    search: '<%= search %>' || '',
    showInactive: '<%= showInactive  %>' == 'true',
    pendingAction: null,
    isLoading: false,
    currentEditId: null,
    allCategories: `<%= categories  %>`
  };


  async function loadCategoriesForDropdown() {
    try {
      const response = await fetch(`${BASE_URL}/admin/categories/api/all`);
      const data = await response.json();
      if (data.success) {
        STATE.allCategories = data.data;
      }
    } catch (error) {
      console.error('Error loading categories:', error);
    }
  }

  function showLoading() {
    STATE.isLoading = true;
    document.getElementById('loading-overlay').classList.add('active');
  }

  function hideLoading() {
    STATE.isLoading = false;
    document.getElementById('loading-overlay').classList.remove('active');
  }

  function showError(message) {
    const errorMsg = document.getElementById('error-msg');
    errorMsg.textContent = message;
    errorMsg.classList.add('show');
    setTimeout(() => {
      errorMsg.classList.remove('show');
    }, 5000);
  }

  function showSuccess(message) {
    const successMsg = document.getElementById('success-msg');
    successMsg.textContent = message;
    successMsg.classList.add('show');
    setTimeout(() => {
      successMsg.classList.remove('show');
    }, 5000);
  }

  function buildUrl(overrides = {}) {
    const params = {
      page: overrides.page || STATE.page,
      status: overrides.status || STATE.status,
      parentFilter: overrides.parentFilter || STATE.parentFilter,
      sortField: overrides.sortField || STATE.sortField,
      sortOrder: overrides.sortOrder || STATE.sortOrder,
      search: overrides.search !== undefined ? overrides.search : STATE.search,
      showInactive: overrides.showInactive !== undefined ? overrides.showInactive : STATE.showInactive
    };

    Object.keys(params).forEach(key => {
      if (params[key] === '' || params[key] === null || params[key] === undefined || 
          (key === 'showInactive' && !params[key])) {
        delete params[key];
      }
    });

    const url = new URL(window.location.pathname, window.location.origin);
    Object.keys(params).forEach(key => {
      url.searchParams.set(key, params[key]);
    });

    return url.toString();
  }

  function navigateToUrl(url) {
    showLoading();
    window.location.href = url;
  }

  function goToPage(page) {
    const pageNum = parseInt(page);
    const maxPages = parseInt('<%= totalPages %>');
    if (pageNum < 1 || pageNum > maxPages) return;
    
    STATE.page = pageNum;
    navigateToUrl(buildUrl({ page: pageNum }));
  }

  function setSortField(field) {
    const newOrder = (STATE.sortField === field && STATE.sortOrder === 'asc') ? 'desc' : 'asc';
    STATE.sortField = field;
    STATE.sortOrder = newOrder;
    STATE.page = 1;
    navigateToUrl(buildUrl({ sortField: field, sortOrder: newOrder, page: 1 }));
  }

  function resetFilters() {
    STATE.page = 1;
    STATE.status = 'all';
    STATE.parentFilter = 'all';
    STATE.sortField = 'name';
    STATE.sortOrder = 'asc';
    STATE.search = '';
    STATE.showInactive = 'false';
    
    navigateToUrl(buildUrl({
      page: 1,
      status: 'all',
      parentFilter: 'all',
      sortField: 'name',
      sortOrder: 'asc',
      search: '',
      showInactive: 'false'
    }));
  }

  function openCategoryModal(mode, categoryId = null, parentId = null) {
    const modal = document.getElementById('category-modal-overlay');
    const title = document.getElementById('category-modal-title');
    const form = document.getElementById('category-form');
    const submitBtn = document.getElementById('category-submit-text');
    
    form.reset();
    clearFormErrors();
    
    if (mode === 'create') {
      title.textContent = parentId ? 'Add Subcategory' : 'Add Category';
      submitBtn.textContent = 'Save Category';
      STATE.currentEditId = null;
      
      if (parentId) {
        document.getElementById('parent-category').value = parentId;
      }
      
      document.getElementById('category-active').checked = true;
      document.getElementById('category-featured').checked = false;
      
    } else if (mode === 'edit' && categoryId) {
      title.textContent = 'Edit Category';
      submitBtn.textContent = 'Update Category';
      STATE.currentEditId = categoryId;
      
      loadCategoryData(categoryId);
    }
    
    populateParentDropdown(categoryId);
    
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    
    setTimeout(() => {
      document.getElementById('category-name').focus();
    }, 300);
  }

  function closeCategoryModal() {
    const modal = document.getElementById('category-modal-overlay');
    modal.classList.remove('active');
    document.body.style.overflow = '';
    STATE.currentEditId = null;
    clearFormErrors();
  }

  async function loadCategoryData(categoryId) {
    try {
      showFormLoading(true);
      
      const response = await fetch(`${BASE_URL}/admin/categories/api/category/${categoryId}`);
      const data = await response.json();
      
      if (data.success) {
        const category = data.data;
        
        document.getElementById('category-name').value = category.name || '';
        document.getElementById('category-description').value = category.description || '';
        document.getElementById('parent-category').value = category.parentCategory?._id || '';
        document.getElementById('category-active').checked = category.isActive;
        document.getElementById('category-featured').checked = category.isFeatured;
        document.getElementById('category-id').value = category._id;
      } else {
        showError('Failed to load category data');
        closeCategoryModal();
      }
    } catch (error) {
      console.error('Error loading category:', error);
      showError('Error loading category data');
      closeCategoryModal();
    } finally {
      showFormLoading(false);
    }
  }

  function populateParentDropdown(excludeId = null) {
    const select = document.getElementById('parent-category');
    
    // Clear existing options except the first one
    while (select.children.length > 1) {
      select.removeChild(select.lastChild);
    }
    
    // Add categories to dropdown
    STATE.allCategories.forEach(category => {
      if (category._id !== excludeId) {
        const option = document.createElement('option');
        option.value = category._id;
        option.textContent = category.name;
        select.appendChild(option);
      }
    });
  }

  function showFormLoading(show) {
    const spinner = document.getElementById('category-spinner');
    const submitBtn = document.getElementById('category-submit-btn');
    
    if (show) {
      spinner.style.display = 'inline-block';
      submitBtn.disabled = true;
    } else {
      spinner.style.display = 'none';
      submitBtn.disabled = false;
    }
  }

  function clearFormErrors() {
    const errors = document.querySelectorAll('.form-error');
    errors.forEach(error => {
      error.classList.remove('show');
      error.textContent = '';
    });
    
    const inputs = document.querySelectorAll('.form-control');
    inputs.forEach(input => {
      input.classList.remove('error');
    });
  }

  function showFormError(fieldName, message) {
    const field = document.querySelector(`[name="${fieldName}"]`);
    const error = document.getElementById(`${fieldName}-error`);
    
    if (field) field.classList.add('error');
    if (error) {
      error.textContent = message;
      error.classList.add('show');
    }
  }

  function validateForm() {
    clearFormErrors();
    let isValid = true;
    
    const name = document.getElementById('category-name').value.trim();
    
    if (!name) {
      showFormError('name', 'Category name is required');
      isValid = false;
    } else if (name.length > 100) {
      showFormError('name', 'Category name cannot exceed 100 characters');
      isValid = false;
    }
    
    const description = document.getElementById('category-description').value.trim();
    if (description && description.length > 500) {
      showFormError('description', 'Description cannot exceed 500 characters');
      isValid = false;
    }
    
    return isValid;
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Load categories for dropdown
    loadCategoriesForDropdown();
    
    // Category form submission
    document.getElementById('category-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validateForm()) {
        return;
      }
      
      showFormLoading(true);
      
      try {
        const formData = new FormData(this);
        const data = {
          name: formData.get('name').trim(),
          description: formData.get('description').trim(),
          parentCategory: formData.get('parentCategory') || null,
          isActive: formData.get('isActive'),
          isFeatured: formData.get('isFeatured')
        };
        
        const isEdit = STATE.currentEditId;
        const url = isEdit 
          ? `${BASE_URL}/admin/categories/update/${STATE.currentEditId}`
          : `${BASE_URL}/admin/categories/create`;
        
        const method = isEdit ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showSuccess(isEdit ? 'Category updated successfully' : 'Category created successfully');
          closeCategoryModal();
          
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          if (result.errors) {
            Object.keys(result.errors).forEach(field => {
              showFormError(field, result.errors[field]);
            });
          } else {
            showError(result.message || 'Failed to save category');
          }
        }
      } catch (error) {
        
        showError('An error occurred while saving the category');
      } finally {
        showFormLoading(false);
      }
    });

    document.getElementById('status-filter').addEventListener('change', function(e) {
      STATE.status = e.target.value;
      STATE.page = 1;
      if(e.target.value == 'inactive'){
        STATE.showInactive = 'true';
      }else if(e.target.value == 'active'){
        STATE.showInactive = 'false';
      }else{
        STATE.showInactive = 'true';
      }
      navigateToUrl(buildUrl({ status: e.target.value, page: 1 }));
    });

    document.getElementById('parent-filter').addEventListener('change', function(e) {
      STATE.parentFilter = e.target.value;
      STATE.page = 1;
      navigateToUrl(buildUrl({ parentFilter: e.target.value, page: 1 }));
    });

    document.getElementById('show-inactive').addEventListener('change', function(e) {
      STATE.showFeatured = e.target.checked;
      STATE.page = 1;
      navigateToUrl(buildUrl({ showInactive: e.target.checked, page: 1 }));
    });

    document.getElementById('sort-field').addEventListener('change', function(e) {
      STATE.sortField = e.target.value;
      STATE.page = 1;
      navigateToUrl(buildUrl({ sortField: e.target.value, page: 1 }));
    });

    document.getElementById('sort-order').addEventListener('click', function() {
      const newOrder = STATE.sortOrder === 'asc' ? 'desc' : 'asc';
      STATE.sortOrder = newOrder;
      STATE.page = 1;
      navigateToUrl(buildUrl({ sortOrder: newOrder, page: 1 }));
    });

    document.getElementById('search-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const searchValue = document.getElementById('search-input').value.trim();
      STATE.search = searchValue;
      STATE.page = 1;
      navigateToUrl(buildUrl({ search: searchValue, page: 1 }));
    });

    document.getElementById('reset-filters').addEventListener('click', resetFilters);

    document.getElementById('page-number').addEventListener('input', function(e) {
      const value = parseInt(e.target.value);
      const maxPages = parseInt('<%= totalPages %>');
      if (value < 1) e.target.value = 1;
      if (value > maxPages) e.target.value = maxPages;
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        if (document.getElementById('category-modal-overlay').classList.contains('active')) {
          closeCategoryModal();
        }
        if (document.getElementById('confirm-modal-overlay').classList.contains('active')) {
          closeConfirmModal();
        }
      }
    });

    document.getElementById('category-modal-overlay').addEventListener('click', function(e) {
      if (e.target === this) {
        closeCategoryModal();
      }
    });

    document.getElementById('confirm-modal-overlay').addEventListener('click', function(e) {
      if (e.target === this) {
        closeConfirmModal();
      }
    });
  });







  function toggleStatus(categoryId, categoryName, activate) {
    const action = activate == 'true'  ? 'deactivate' : 'activate';
    showConfirmModal(
      `${action.charAt(0).toUpperCase() + action.slice(1)} Category`,
      `Are you sure you want to ${action} "${categoryName}"?`,
      action.charAt(0).toUpperCase() + action.slice(1),
      () => performToggleStatus(categoryId, activate)
    );
  }

  function performToggleStatus(categoryId, active) {
    if (STATE.isLoading) return;
    showLoading();
    
    fetch(`${BASE_URL}/admin/categories/toggle-status/${categoryId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ active: active })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        window.location.reload();
      } else {
        hideLoading();
        showError(data.message || 'Failed to update category');
      }
    })
    .catch(error => {
      hideLoading();
      showError('An error occurred while updating the category');
      console.error('Error:', error);
    });
  }




  function showConfirmModal(title, message, confirmText, confirmCallback) {
    document.getElementById('confirm-modal-title').textContent = title;
    document.getElementById('confirm-modal-message').textContent = message;
    document.getElementById('confirm-modal-confirm').textContent = confirmText;
    STATE.pendingAction = confirmCallback;
    document.getElementById('confirm-modal-overlay').classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeConfirmModal() {
    document.getElementById('confirm-modal-overlay').classList.remove('active');
    document.body.style.overflow = '';
    STATE.pendingAction = null;
  }

  function confirmAction() {
    if (STATE.pendingAction) {
      STATE.pendingAction();
      closeConfirmModal();
    }
  }

  // Handle browser navigation
  window.addEventListener('popstate', function() {
    if (!STATE.isLoading) {
      window.location.reload();
    }
  });

  // Hide loading on page load
  window.addEventListener('load', function() {
    hideLoading();
  });
</script>