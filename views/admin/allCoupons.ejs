<section class="table-components">
  <div class="container-fluid">
    <!-- Loading overlay -->
    <div class="loading-overlay" id="loading-overlay">
      <div class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading...</p>
      </div>
    </div>

    <div class="tables-wrapper">
      <div class="card-style mb-30">
        <div class="page-header">
          <h6 class="page-title">Coupon Management</h6>
          <div class="header-stats">
            <span class="stat-item">
              Showing: <span id="result-count"><%= coupons.length %></span> / <span id="total-count"><%= totalCoupons %></span>
            </span>
          </div>
        </div>
        
        <p class="error-msg" id="error-msg"></p>
        <p class="success-msg" id="success-msg"></p>
        
        <div class="table-controls">
          <div class="controls-row">

            <div class="filters-section">
              <div class="filter-group">
                <label class="filter-label">Status:</label>
                <select class="filter form-select" id="status-filter">
                  <option value="all" <%= status==='all' ? 'selected' : '' %>>All Coupons</option>
                  <option value="active" <%= status==='active' ? 'selected' : '' %>>Active</option>
                  <option value="inactive" <%= status==='inactive' ? 'selected' : '' %>>Inactive</option>
                  <option value="expired" <%= status==='expired' ? 'selected' : '' %>>Expired</option>
                </select>
              </div>

              <div class="filter-group">
                <label class="filter-label">User Type:</label>
                <select class="filter form-select" id="user-type-filter">
                  <option value="all" <%= userTypeFilter==='all' ? 'selected' : '' %>>All Types</option>
                  <option value="all" <%= userTypeFilter==='all' ? 'selected' : '' %>>All Users</option>
                  <option value="newUsers" <%= userTypeFilter==='newUsers' ? 'selected' : '' %>>New Users</option>
                  <option value="vipUsers" <%= userTypeFilter==='vipUsers' ? 'selected' : '' %>>VIP Users</option>
                </select>
              </div>
            </div>
            
            <div class="toggle-group">
              <label class="toggle-switch">
                <input type="checkbox" id="show-expired" <%= showExpired == 'true' ? 'checked' : '' %>>
                <span class="toggle-slider"></span>
                <span class="toggle-label"> Show Expired </span>
              </label>
            </div>

            <div class="search-section">
              <form class="search-form" id="search-form">
                <div class="search-input-group">
                  <input type="text"
                         id="search-input"
                         name="search"
                         class="form-control search-input"
                         placeholder="Search coupon codes..."
                         value="<%= search || '' %>">
                  <button type="submit" class="btn btn-primary search-btn">
                    <i class="lni lni-search"></i>
                  </button>
                </div>
              </form>
            </div>

            <div class="sort-section">
              <div class="sort-group">
                <label class="sort-label">Sort by:</label>
                <select class="sort-field form-select" id="sort-field">
                  <option value="code" <%= sortField==='code' ? 'selected' : '' %>>Code</option>
                  <option value="discount" <%= sortField==='discount' ? 'selected' : '' %>>Discount</option>
                  <option value="expiresAt" <%= sortField==='expiresAt' ? 'selected' : '' %>>Expiry Date</option>
                  <option value="createdAt" <%= sortField==='createdAt' ? 'selected' : '' %>>Created Date</option>
                  <option value="usedCount" <%= sortField==='usedCount' ? 'selected' : '' %>>Usage Count</option>
                </select>
                
                <button class="btn btn-outline-secondary sort-order-btn" id="sort-order" type="button">
                  <span class="sort-icon"><%= sortOrder==='asc' ? '↑' : '↓' %></span>
                </button>
              </div>
            </div>

            <!-- Actions -->
            <div class="actions-section">
              <button class="btn btn-secondary reset-btn" id="reset-filters" type="button">
                <i class="lni lni-reload"></i>
                <span class="btn-text">Reset</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Pagination Navigator -->
        <div class="table-navigator">
          <button class="btn btn-primary" onclick="openCouponModal('create')">
            <i class="lni lni-plus"></i>
            <span class="btn-text">Add Coupon</span>
          </button>
          
          <div class="pagination-controls">
            <button class="btn btn-outline-primary nav-btn" 
                    id="prev-btn"
                    <%= currentPage<=1 ? 'disabled' : '' %>
                    onclick="goToPage(<%= currentPage-1 %>)">
              <i class="lni lni-chevron-left"></i>
              <span class="btn-text">Prev</span>
            </button>
            
            <div class="page-info">
              <span class="page-label">Page</span>
              <input type="number" 
                     min="1" 
                     max="<%= totalPages %>"
                     id="page-number"
                     class="page-input" 
                     value="<%= currentPage %>"
                     onchange="goToPage(this.value)" />
              <span class="page-total">of <%= totalPages %></span>
            </div>
            
            <button class="btn btn-outline-primary nav-btn" 
                    id="next-btn"
                    <%= currentPage>=totalPages ? 'disabled' : '' %>
                    onclick="goToPage(<%= currentPage+1 %>)">
              <span class="btn-text">Next</span>
              <i class="lni lni-chevron-right"></i>
            </button>
          </div>
        </div>

        <!-- Table -->
        <div class="table-wrapper">
          <div class="table-container">
            <table class="table" id="coupons-table">
              <% if (coupons && coupons.length > 0) { %>
              <thead>
                <tr>
                  <th class="sortable-header" onclick="setSortField('code')">
                    <div class="header-content">
                      <span>Coupon Code</span>
                      <% if (sortField === 'code') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th class="sortable-header" onclick="setSortField('discount')">
                    <div class="header-content">
                      <span>Discount</span>
                      <% if (sortField === 'discount') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th>User Type</th>
                  <th>Min Order</th>
                  <th class="sortable-header" onclick="setSortField('usedCount')">
                    <div class="header-content">
                      <span>Usage</span>
                      <% if (sortField === 'usedCount') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th class="sortable-header" onclick="setSortField('expiresAt')">
                    <div class="header-content">
                      <span>Expires</span>
                      <% if (sortField === 'expiresAt') { %>
                        <span class="sort-indicator">
                          <%= sortOrder === 'asc' ? '↑' : '↓' %>
                        </span>
                      <% } %>
                    </div>
                  </th>
                  <th>Status</th>
                  <th class="actions-header">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% coupons.forEach((coupon) => { 
                  const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date() ;
                  const isMaxedOut = coupon.usedCount >= coupon.maxUsage;
                %>
                <tr class="coupon-row <%= (coupon.isActive || isExpired) && 'inactive-coupon' %>" data-coupon-id="<%= coupon._id %>">
                  <td class="coupon-code">
                    <div class="code-info">
                      <span class="code-text"><%= coupon.code %></span>
                      <% if (isMaxedOut) { %>
                        <span class="usage-badge maxed-out">MAXED OUT</span>
                      <% } %>
                    </div>
                  </td>
                  <td class="coupon-discount">
                    <span class="discount-value"><%= coupon.discount %>% OFF (max: <%= coupon.maxDiscount %>)</span>
                  </td>
                  <td class="user-type">
                    <span class="user-type-badge <%= coupon.onlyFor %>">
                      <%= coupon.onlyFor === 'all' ? 'All Users' : 
                          coupon.onlyFor === 'newUsers' ? 'New Users' : 'VIP Users' %>
                    </span>
                  </td>
                  <td class="min-order">
                    <% if (coupon.minOrderAmount > 0) { %>
                      ₹<%= coupon.minOrderAmount.toFixed(2) %>
                    <% } else { %>
                      <span class="text-muted">No minimum</span>
                    <% } %>
                  </td>
                  <td class="usage-stats">
                    <div class="usage-info">
                      <span class="usage-count"><%= coupon.usedCount %> / <%= coupon.maxUsage %></span>
                      <div class="usage-bar">
                        <div class="usage-progress" style="width: '<%= (coupon.usedCount / coupon.maxUsage) * 100 %>%'"></div>
                      </div>
                    </div>
                  </td>
                  <td class="expiry-date">
                    <% if (coupon.expiresAt) { %>
                      <span class="date-text <%= isExpired ? 'expired' : '' %>">
                        <%= new Date(coupon.expiresAt).toLocaleDateString() %>
                      </span>
                      <% if (isExpired) { %>
                        <span class="expired-badge">EXPIRED</span>
                      <% } %>
                    <% } else { %>
                      <span class="no-expiry">No expiry</span>
                    <% } %>
                  </td>
                  <td class="coupon-status">
                    <div class="status-badges">
                      <span class="status-badge <%= coupon.isActive && !isExpired && !isMaxedOut ? 'active' : 'inactive' %>">
                        <%= coupon.isActive && !isExpired && !isMaxedOut ? 'Active' : 
                            isExpired ? 'Expired' : 
                            isMaxedOut ? 'Maxed Out' : 'Inactive' %>
                      </span>
                    </div>
                  </td>
                  <td class="coupon-actions">
                    <div class="action-buttons">
                      <button class="btn btn-sm btn-outline-primary edit-btn" 
                              onclick="openCouponModal('edit', '<%= coupon._id %>')"
                              title="Edit Coupon">
                        <i class="lni lni-pencil"></i>
                        <span class="btn-text">Edit</span>
                      </button>

                      <button class="btn btn-sm <%= coupon.isActive ? 'btn-outline-danger' : 'btn-outline-success' %> toggle-status-btn" 
                              onclick="toggleStatus('<%= coupon._id %>', '<%= coupon.code %>', '<%= coupon.isActive %>')"
                              title="<%= coupon.isActive ? 'Deactivate' : 'Activate' %> Coupon"
                              <%= isExpired ? 'disabled' : '' %>>
                        <i class="lni lni-<%= coupon.isActive ? 'lock' : 'unlock' %>"></i>
                        <span class="btn-text"><%= coupon.isActive ? 'Deactivate' : 'Activate' %></span>
                      </button>

                    </div>
                  </td>
                </tr>
                <% }) %>
              </tbody>
              <% } else { %>
              <tbody>
                <tr class="no-data-row">
                  <td colspan="8" class="no-data-cell">
                    <div class="no-data-content">
                      <div class="no-data-icon">
                        <i class="lni lni-ticket"></i>
                      </div>
                      <p>No coupons found</p>
                      <% if (search || status !== 'all' || userTypeFilter !== 'all') { %>
                        <button class="btn btn-link" onclick="resetFilters()">Clear filters</button>
                      <% } else { %>
                        <button class="btn btn-primary" onclick="openCouponModal('create')">
                          <i class="lni lni-plus"></i>
                          Create First Coupon
                        </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
              </tbody>
              <% } %>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Confirmation Modal -->
<div class="modal-overlay" id="confirm-modal-overlay">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="confirm-modal-title">Confirm Action</h5>
      <button class="modal-close" onclick="closeConfirmModal()" aria-label="Close">
        <i class="lni lni-close"></i>
      </button>
    </div>
    <div class="modal-body">
      <p id="confirm-modal-message">Are you sure you want to perform this action?</p>
    </div>
    <div class="modal-footer">
      <button class="btn btn-secondary" onclick="closeConfirmModal()">Cancel</button>
      <button class="btn btn-danger" id="confirm-modal-confirm" onclick="confirmAction()">Confirm</button>
    </div>
  </div>
</div>

<!-- Coupon Form Modal -->
<div class="modal-overlay" id="coupon-modal-overlay">
  <div class="modal-content modal-lg">
    <div class="modal-header">
      <h5 class="modal-title" id="coupon-modal-title">Add Coupon</h5>
      <button class="modal-close" onclick="closeCouponModal()" aria-label="Close">
        <i class="lni lni-close"></i>
      </button>
    </div>
    <form id="coupon-form">
      <div class="modal-body">
        <div id="modal-messages"></div>
        
        <div class="form-row mt-2">
          <div class="form-group">
            <label for="coupon-code" class="form-label">Coupon Code <span class="required">*</span></label>
            <input type="text" 
                   id="coupon-code" 
                   name="code" 
                   class="form-control" 
                   placeholder="Enter coupon code (e.g., SAVE20)"
                   style="text-transform: uppercase;"
                   >
            <div class="form-error" id="code-error"></div>
            <small class="form-help">Code will be automatically converted to uppercase</small>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="coupon-discount" class="form-label">Discount Percentage <span class="required">*</span></label>
            <div class="input-group">
              <input type="number" 
                     id="coupon-discount" 
                     name="discount" 
                     class="form-control" 
                     placeholder="Enter discount percentage"
                     min="1"
                     max="100"
                     >
              <span class="input-group-text">%</span>
            </div>
            <div class="form-error" id="discount-error"></div>
          </div>
        </div>

                <div class="form-row mt-2">
          <div class="form-group">
            <label for="max-coupon-discount" class="form-label">Max Discount Amount <span class="required">*</span></label>
            <div class="input-group">
              <input type="number" 
                     id="max-coupon-discount" 
                     name="maxDiscount" 
                     class="form-control" 
                     placeholder="Enter max discount percentage"
                     min="0"
                     >
                          </div>
            <div class="form-error" id="discount-error"></div>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="min-order-amount" class="form-label">Minimum Order Amount</label>
            <div class="input-group">
              <span class="input-group-text">₹</span>
              <input type="number" 
                     id="min-order-amount" 
                     name="minOrderAmount" 
                     class="form-control" 
                     placeholder="0"
                     min="0"
                     step="0.01">
            </div>
            <div class="form-error" id="minOrderAmount-error"></div>
            <small class="form-help">Leave 0 for no minimum order requirement</small>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="max-usage" class="form-label">Maximum Usage Count <span class="required">*</span></label>
            <input type="number" 
                   id="max-usage" 
                   name="maxUsage" 
                   class="form-control" 
                   placeholder="Enter maximum usage count"
                   min="1"
                   value="1"
                   >
            <div class="form-error" id="maxUsage-error"></div>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="user-type" class="form-label">User Type</label>
            <select id="user-type" name="onlyFor" class="form-control">
              <option value="all">All Users</option>
              <option value="newUsers">New Users Only</option>
              <option value="vipUsers">VIP Users Only</option>
            </select>
            <div class="form-error" id="onlyFor-error"></div>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group">
            <label for="expires-at" class="form-label">Expiry Date</label>
            <input type="datetime-local" 
                   id="expires-at" 
                   name="expiresAt" 
                   class="form-control">
            <div class="form-error" id="expiresAt-error"></div>
            <small class="form-help">Leave empty for no expiry date</small>
          </div>
        </div>

        <div class="form-row mt-2">
          <div class="form-group-inline">
            <div class="checkbox-group">
              <label class="checkbox-label">
                <input type="checkbox" id="coupon-active" name="isActive" checked>
                <span class="checkbox-custom"></span>
                <span class="checkbox-text">Active</span>
              </label>
            </div>
          </div>
        </div>

        <input type="hidden" id="coupon-id" name="id">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" onclick="closeCouponModal()">Cancel</button>
        <button type="submit" class="btn btn-primary" id="coupon-submit-btn">
          <span class="btn-spinner" id="coupon-spinner" style="display: none;">
            <i class="lni lni-spinner-arrow"></i>
          </span>
          <span id="coupon-submit-text">Save Coupon</span>
        </button>
      </div>
    </form>
  </div>
</div>

<style>
/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  max-width: 500px;
  width: 90%;
  max-height: 90vh;
  overflow: hidden;
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.modal-content.modal-lg {
  max-width: 700px;
}

.modal-overlay.active .modal-content {
  transform: scale(1);
}

.modal-header {
  padding: 20px 24px;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #f8f9fa;
}

.modal-title {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #212529;
}

.modal-close {
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: #6c757d;
  padding: 4px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.3s ease;
}

.modal-close:hover {
  background: #e9ecef;
  color: #495057;
}

.modal-body {
  padding: 24px;
  max-height: 60vh;
  overflow-y: auto;
}

.modal-footer {
  padding: 16px 24px;
  border-top: 1px solid #e9ecef;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  background: #f8f9fa;
}

/* Coupon-specific styles */
.coupon-code .code-text {
  font-family: 'Courier New', monospace;
  font-weight: bold;
  font-size: 14px;
  background: #f8f9fa;
  padding: 4px 8px;
  border-radius: 4px;
  border: 1px solid #dee2e6;
}

.usage-badge {
  font-size: 10px;
  padding: 2px 6px;
  border-radius: 10px;
  font-weight: bold;
  margin-left: 8px;
}

.usage-badge.maxed-out {
  background: #dc3545;
  color: white;
}

.discount-value {
  font-weight: bold;
  color: #28a745;
  font-size: 14px;
}

.user-type-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
}

.user-type-badge.all {
  background: #e3f2fd;
  color: #1976d2;
}

.user-type-badge.newUsers {
  background: #f3e5f5;
  color: #7b1fa2;
}

.user-type-badge.vipUsers {
  background: #fff3e0;
  color: #f57c00;
}

.usage-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.usage-count {
  font-size: 12px;
  color: #6c757d;
}

.usage-bar {
  width: 60px;
  height: 4px;
  background: #e9ecef;
  border-radius: 2px;
  overflow: hidden;
}

.usage-progress {
  height: 100%;
  background: #28a745;
  transition: width 0.3s ease;
}

.date-text.expired {
  color: #dc3545;
  font-weight: bold;
}

.expired-badge {
  font-size: 10px;
  background: #dc3545;
  color: white;
  padding: 2px 6px;
  border-radius: 10px;
  font-weight: bold;
  margin-left: 8px;
}

.no-expiry {
  color: #6c757d;
  font-style: italic;
}

.inactive-coupon {
  opacity: 0.6;
  background-color: #f8f9fa9a;
}

.input-group {
  display: flex;
  align-items: center;
}

.input-group-text {
  background: #f8f9fa;
  border: 1px solid #ced4da;
  border-right: none;
  padding: 0.375rem 0.75rem;
  font-size: 14px;
  color: #6c757d;
  border-radius: 0.375rem 0 0 0.375rem;
}

.input-group .form-control {
  border-left: none;
  border-radius: 0 0.375rem 0.375rem 0;
}

.form-help {
  font-size: 12px;
  color: #6c757d;
  margin-top: 4px;
  display: block;
}

/* Loading overlay */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.loading-overlay.active {
  opacity: 1;
  visibility: visible;
}

.loading-spinner {
  text-align: center;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 16px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Error and success messages */
.error-msg, .success-msg {
  padding: 12px 16px;
  border-radius: 6px;
  margin-bottom: 16px;
  font-size: 14px;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
  transform: translateY(-10px);
}

.error-msg.show, .success-msg.show {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.error-msg {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.success-msg {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

/* Form error styles */
.form-error {
  color: #dc3545;
  font-size: 12px;
  margin-top: 4px;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.form-error.show {
  opacity: 1;
  visibility: visible;
}

.form-control.error {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
}

/* Responsive styles */
@media (max-width: 768px) {
  .modal-content {
    width: 95%;
    margin: 20px;
  }
  
  .modal-body {
    padding: 16px;
  }
  
  .modal-header, .modal-footer {
    padding: 16px;
  }
  
  .action-buttons {
    flex-direction: column;
    gap: 8px;
  }
  
  .btn-text {
    display: none;
  }
  
  .table-container {
    overflow-x: auto;
  }
  
  .controls-row {
    flex-direction: column;
    gap: 16px;
  }
  
  .filters-section {
    flex-direction: column;
    gap: 12px;
  }
}

@media (max-width: 576px) {
  .page-header {
    flex-direction: column;
    gap: 12px;
    text-align: center;
  }
  
  .table-navigator {
    flex-direction: column;
    gap: 16px;
  }
  
  .pagination-controls {
    justify-content: center;
  }
}
</style>

<script>
  const BASE_URL = window.location.origin;
  
  const STATE = {
    page: parseInt('<%= currentPage %>') || 1,
    status: '<%= status %>' || 'all',
    userTypeFilter: '<%= userTypeFilter %>' || 'all',
    sortField: '<%= sortField %>' || 'createdAt',
    sortOrder: '<%= sortOrder %>' || 'desc',
    search: '<%= search %>' || '',
    showExpired: '<%= showExpired %>' == 'true',
    pendingAction: null,
    isLoading: false,
    currentEditId: null
  };

  function showLoading() {
    STATE.isLoading = true;
    document.getElementById('loading-overlay').classList.add('active');
  }

  function hideLoading() {
    STATE.isLoading = false;
    document.getElementById('loading-overlay').classList.remove('active');
  }

  function showError(message) {
    const errorMsg = document.getElementById('error-msg');
    errorMsg.textContent = message;
    errorMsg.classList.add('show');
    setTimeout(() => {
      errorMsg.classList.remove('show');
    }, 5000);
  }

  function showSuccess(message) {
    const successMsg = document.getElementById('success-msg');
    successMsg.textContent = message;
    successMsg.classList.add('show');
    setTimeout(() => {
      successMsg.classList.remove('show');
    }, 5000);
  }

  function showModalError(message) {
    const modalMessages = document.getElementById('modal-messages');
    modalMessages.innerHTML = `<div class="error-msg show">${message}</div>`;
    setTimeout(() => {
      modalMessages.innerHTML = '';
    }, 5000);
  }

  function showModalSuccess(message) {
    const modalMessages = document.getElementById('modal-messages');
    modalMessages.innerHTML = `<div class="success-msg show">${message}</div>`;
    setTimeout(() => {
      modalMessages.innerHTML = '';
    }, 3000);
  }

  function buildUrl(overrides = {}) {
    const params = {
      page: overrides.page || STATE.page,
      status: overrides.status || STATE.status,
      userTypeFilter: overrides.userTypeFilter || STATE.userTypeFilter,
      sortField: overrides.sortField || STATE.sortField,
      sortOrder: overrides.sortOrder || STATE.sortOrder,
      search: overrides.search !== undefined ? overrides.search : STATE.search,
      showExpired: overrides.showExpired !== undefined ? overrides.showExpired : STATE.showExpired
    };

    Object.keys(params).forEach(key => {
      if (params[key] === '' || params[key] === null || params[key] === undefined || 
          (key === 'showExpired' && !params[key])) {
        delete params[key];
      }
    });

    const url = new URL(window.location.pathname, window.location.origin);
    Object.keys(params).forEach(key => {
      url.searchParams.set(key, params[key]);
    });

    return url.toString();
  }

  function navigateToUrl(url) {
    // showLoading();
    refetchAndUpdateCoupons()
  }

  function goToPage(page) {
    const pageNum = parseInt(page);
    const maxPages = parseInt('<%= totalPages %>');
    if (pageNum < 1 || pageNum > maxPages) return;
    
    STATE.page = pageNum;
    navigateToUrl(buildUrl({ page: pageNum }));
  }

  function setSortField(field) {
    const newOrder = (STATE.sortField === field && STATE.sortOrder === 'asc') ? 'desc' : 'asc';
    STATE.sortField = field;
    STATE.sortOrder = newOrder;
    STATE.page = 1;
    navigateToUrl(buildUrl({ sortField: field, sortOrder: newOrder, page: 1 }));
  }

  function resetFilters() {
    STATE.page = 1;
    STATE.status = 'all';
    STATE.userTypeFilter = 'all';
    STATE.sortField = 'createdAt';
    STATE.sortOrder = 'desc';
    STATE.search = '';
    STATE.showExpired = false;
    
    navigateToUrl(buildUrl({
      page: 1,
      status: 'all',
      userTypeFilter: 'all',
      sortField: 'createdAt',
      sortOrder: 'desc',
      search: '',
      showExpired: false
    }));
  }

  function openCouponModal(mode, couponId = null) {
    const modal = document.getElementById('coupon-modal-overlay');
    const title = document.getElementById('coupon-modal-title');
    const form = document.getElementById('coupon-form');
    const submitBtn = document.getElementById('coupon-submit-text');
    
    form.reset();
    clearFormErrors();
    document.getElementById('modal-messages').innerHTML = '';
    
    if (mode === 'create') {
      title.textContent = 'Add Coupon';
      submitBtn.textContent = 'Save Coupon';
      STATE.currentEditId = null;
      
      document.getElementById('coupon-active').checked = true;
      document.getElementById('max-usage').value = 1;
      document.getElementById('min-order-amount').value = 0;
      
    } else if (mode === 'edit' && couponId) {
      title.textContent = 'Edit Coupon';
      submitBtn.textContent = 'Update Coupon';
      STATE.currentEditId = couponId;
      
      loadCouponData(couponId);
    }
    
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    
    setTimeout(() => {
      document.getElementById('coupon-code').focus();
    }, 300);
  }

  function closeCouponModal() {
    const modal = document.getElementById('coupon-modal-overlay');
    modal.classList.remove('active');
    document.body.style.overflow = '';
    STATE.currentEditId = null;
    clearFormErrors();
    document.getElementById('modal-messages').innerHTML = '';
  }

  async function loadCouponData(couponId) {
    try {
      showFormLoading(true);
      
      const response = await fetch(`${BASE_URL}/admin/coupons/api/coupon/${couponId}`);
      const data = await response.json();
      
      if (data.success) {
        const coupon = data.data;
        
        document.getElementById('coupon-code').value = coupon.code || '';
        document.getElementById('coupon-discount').value = coupon.discount || '';
        document.getElementById('max-coupon-discount').value = coupon.maxDiscount || '';
        

        document.getElementById('min-order-amount').value = coupon.minOrderAmount || 0;
        document.getElementById('max-usage').value = coupon.maxUsage || 1;
        document.getElementById('user-type').value = coupon.onlyFor || 'all';
        document.getElementById('coupon-active').checked = coupon.isActive;
        document.getElementById('coupon-id').value = coupon._id;
        
        if (coupon.expiresAt) {
          const date = new Date(coupon.expiresAt);
          const localDateTime = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
          document.getElementById('expires-at').value = localDateTime;
        }
      } else {
        showModalError('Failed to load coupon data');
        closeCouponModal();
      }
    } catch (error) {
      console.error('Error loading coupon:', error);
      showModalError('Error loading coupon data');
      closeCouponModal();
    } finally {
      showFormLoading(false);
    }
  }

  function showFormLoading(show) {
    const spinner = document.getElementById('coupon-spinner');
    const submitBtn = document.getElementById('coupon-submit-btn');
    
    if (show) {
      spinner.style.display = 'inline-block';
      submitBtn.disabled = true;
    } else {
      spinner.style.display = 'none';
      submitBtn.disabled = false;
    }
  }

  function clearFormErrors() {
    const errors = document.querySelectorAll('.form-error');
    errors.forEach(error => {
      error.classList.remove('show');
      error.textContent = '';
    });
    
    const inputs = document.querySelectorAll('.form-control');
    inputs.forEach(input => {
      input.classList.remove('error');
    });
  }

  function showFormError(fieldName, message) {
    const field = document.querySelector(`[name="${fieldName}"]`);
    const error = document.getElementById(`${fieldName}-error`);
    
    if (field) field.classList.add('error');
    if (error) {
      error.textContent = message;
      error.classList.add('show');
    }
  }

  function validateForm() {
    clearFormErrors();
    let isValid = true;
    
    const code = document.getElementById('coupon-code').value.trim();
    const discount = document.getElementById('coupon-discount').value;
    const maxDiscount = document.getElementById('max-coupon-discount').value;
    const maxUsage = document.getElementById('max-usage').value;
    const minOrderAmount = document.getElementById('min-order-amount').value;
    const expiresAt = document.getElementById('expires-at').value;
    
    if (!code) {
      showFormError('code', 'coupon code is required');
      isValid = false;
    } else if (code.length < 3) {
      showFormError('code', 'coupon code must be at least 3 characters');
      isValid = false;
    } else if (code.length > 20) {
      showFormError('code', 'coupon code cannot exceed 20 characters');
      isValid = false;
    } else if (!/^[A-Z0-9]+$/.test(code.toUpperCase())) {
      showFormError('code', 'coupon code can only contain letters and numbers');
      isValid = false;
    }
    
    if (!discount || !maxDiscount) {
      showFormError('discount', 'Discount percentage AND MAX Discount is required');
      isValid = false;
    } else if (discount < 1 || discount > 90) {
      showFormError('discount', 'Discount must be between 1% and 90%');
      isValid = false;
    }
    
    if (!maxUsage) {
      showFormError('maxUsage', 'Maximum usage count is required');
      isValid = false;
    } else if (maxUsage < 1) {
      showFormError('maxUsage', 'Maximum usage must be at least 1');
      isValid = false;
    }
    
    if (minOrderAmount && minOrderAmount < 0) {
      showFormError('minOrderAmount', 'Minimum order amount cannot be negative');
      isValid = false;
    }
    
    if (expiresAt) {
      const expiryDate = new Date(expiresAt);
      const now = new Date();
      if (expiryDate <= now) {
        showFormError('expiresAt', 'Expiry date must be in the future');
        isValid = false;
      }
    }
    
    return isValid;
  }

  function toggleStatus(couponId, couponCode, isActive) {
    const action = isActive === 'true' ? 'deactivate' : 'activate';
    showConfirmModal(
      `${action.charAt(0).toUpperCase() + action.slice(1)} Coupon`,
      `Are you sure you want to ${action} coupon "${couponCode}"?`,
      action.charAt(0).toUpperCase() + action.slice(1),
      () => performToggleStatus(couponId, isActive)
    );
  }

  function deleteCoupon(couponId, couponCode) {
    showConfirmModal(
      'Delete Coupon',
      `Are you sure you want to delete coupon "${couponCode}"? This action cannot be undone.`,
      'Delete',
      () => performDeleteCoupon(couponId)
    );
  }

  function performToggleStatus(couponId, isActive) {
    if (STATE.isLoading) return;
    showLoading();
    
    fetch(`${BASE_URL}/admin/coupons/toggle-status/${couponId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ isActive: ( isActive === 'false' ? true : false || !isActive ) })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showSuccess(data.message || 'Coupon status updated successfully');
         refetchAndUpdateCoupons()
      } else {
        hideLoading();
        showError(data.message || 'Failed to update coupon status');
      }
    })
    .catch(error => {
      hideLoading();
      showError('An error occurred while updating the coupon');
      console.error('Error:', error);
    });
  }

  function performDeleteCoupon(couponId) {
    if (STATE.isLoading) return;
    showLoading();
    
    fetch(`${BASE_URL}/admin/coupons/delete/${couponId}`, {
      method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showSuccess(data.message || 'Coupon deleted successfully');
        refetchAndUpdateCoupons()
      } else {
        hideLoading();
        showError(data.message || 'Failed to delete coupon');
      }
    })
    .catch(error => {
      hideLoading();
      showError('An error occurred while deleting the coupon');
      console.error('Error:', error);
    });
  }

  function showConfirmModal(title, message, confirmText, confirmCallback) {
    document.getElementById('confirm-modal-title').textContent = title;
    document.getElementById('confirm-modal-message').textContent = message;
    document.getElementById('confirm-modal-confirm').textContent = confirmText;
    STATE.pendingAction = confirmCallback;
    document.getElementById('confirm-modal-overlay').classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeConfirmModal() {
    document.getElementById('confirm-modal-overlay').classList.remove('active');
    document.body.style.overflow = '';
    STATE.pendingAction = null;
  }

  function confirmAction() {
    if (STATE.pendingAction) {
      STATE.pendingAction();
      closeConfirmModal();
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Coupon form submission
    document.getElementById('coupon-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validateForm()) {
        return;
      }
      
      showFormLoading(true);
      
      try {
        const formData = new FormData(this);
        const data = {
          code: formData.get('code').trim().toUpperCase(),
          discount: parseInt(formData.get('discount')),
          maxDiscount: parseFloat(formData.get('maxDiscount')) || 0,
          minOrderAmount: parseFloat(formData.get('minOrderAmount')) || 0,
          maxUsage: parseInt(formData.get('maxUsage')),
          onlyFor: formData.get('onlyFor'),
          expiresAt: formData.get('expiresAt') || null,
          isActive: formData.has('isActive')
        };
        
        const isEdit = STATE.currentEditId;
        const url = isEdit 
          ? `${BASE_URL}/admin/coupons/update/${STATE.currentEditId}`
          : `${BASE_URL}/admin/coupons/create`;
        
        const method = isEdit ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showModalSuccess(isEdit ? 'Coupon updated successfully' : 'Coupon created successfully');
          setTimeout(() => {
            closeCouponModal();
             refetchAndUpdateCoupons()
          }, 1500);
        } else {
          if (result.errors) {
            Object.keys(result.errors).forEach(field => {
              showFormError(field, result.errors[field]);
            });
          } else {
            showModalError(result.message || 'Failed to save coupon');
          }
        }
      } catch (error) {
        showModalError('An error occurred while saving the coupon');
        console.error('Error:', error);
      } finally {
        showFormLoading(false);
      }
    });

    document.getElementById('status-filter').addEventListener('change', function(e) {
      STATE.status = e.target.value;
      STATE.page = 1;
      navigateToUrl(buildUrl({ status: e.target.value, page: 1 }));
    });

    document.getElementById('user-type-filter').addEventListener('change', function(e) {
      STATE.userTypeFilter = e.target.value;
      STATE.page = 1;
      navigateToUrl(buildUrl({ userTypeFilter: e.target.value, page: 1 }));
    });

    document.getElementById('show-expired').addEventListener('change', function(e) {
      STATE.showExpired = e.target.checked;
      STATE.page = 1;
      navigateToUrl(buildUrl({ showExpired: e.target.checked, page: 1 }));
    });

    document.getElementById('sort-field').addEventListener('change', function(e) {
      STATE.sortField = e.target.value;
      STATE.page = 1;
      navigateToUrl(buildUrl({ sortField: e.target.value, page: 1 }));
    });

    document.getElementById('sort-order').addEventListener('click', function() {
      const newOrder = STATE.sortOrder === 'asc' ? 'desc' : 'asc';
      STATE.sortOrder = newOrder;
      STATE.page = 1;
      navigateToUrl(buildUrl({ sortOrder: newOrder, page: 1 }));
    });

    document.getElementById('search-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const searchValue = document.getElementById('search-input').value.trim();
      STATE.search = searchValue;
      STATE.page = 1;
      navigateToUrl(buildUrl({ search: searchValue, page: 1 }));
    });

    document.getElementById('reset-filters').addEventListener('click', resetFilters);


    document.getElementById('coupon-code').addEventListener('input', function(e) {
      e.target.value = e.target.value.toUpperCase();
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        if (document.getElementById('coupon-modal-overlay').classList.contains('active')) {
          closeCouponModal();
        }
        if (document.getElementById('confirm-modal-overlay').classList.contains('active')) {
          closeConfirmModal();
        }
      }
    });

    document.getElementById('coupon-modal-overlay').addEventListener('click', function(e) {
      if (e.target === this) {
        closeCouponModal();
      }
    });

    document.getElementById('confirm-modal-overlay').addEventListener('click', function(e) {
      if (e.target === this) {
        closeConfirmModal();
      }
    });
  });

  window.addEventListener('popstate', function() {
    if (!STATE.isLoading) {
   refetchAndUpdateCoupons()
    }
  });

  window.addEventListener('load', function() {
    hideLoading();
  });



function buildUrl(overrides = {}) {
  const params = {
    page: overrides.page || STATE.page,
    status: overrides.status || STATE.status,
    userTypeFilter: overrides.userTypeFilter || STATE.userTypeFilter,
    sortField: overrides.sortField || STATE.sortField,
    sortOrder: overrides.sortOrder || STATE.sortOrder,
    search: overrides.search !== undefined ? overrides.search : STATE.search,
    showExpired: overrides.showExpired !== undefined ? overrides.showExpired : STATE.showExpired
  };

  Object.keys(params).forEach(key => {
    if (params[key] === '' || params[key] === null || params[key] === undefined || 
        (key === 'showExpired' && !params[key])) {
      delete params[key];
    }
  });

  const url = new URL(window.location.pathname, window.location.origin);
  Object.keys(params).forEach(key => url.searchParams.set(key, params[key]));

  return url.toString();
}

function updateHistory() {
  const url = buildUrl();
  if (window.location.href !== url) {
    window.history.pushState({ page: STATE.page, status: STATE.status, userTypeFilter: STATE.userTypeFilter, sortField: STATE.sortField, sortOrder: STATE.sortOrder, search: STATE.search, showExpired: STATE.showExpired }, '', url);
  }
}

async function refetchAndUpdateCoupons() {
  showLoading();

  try {
    const params = new URLSearchParams();
    params.set('page', STATE.page);
    if (STATE.status !== 'all') params.set('status', STATE.status);
    if (STATE.userTypeFilter !== 'all') params.set('userTypeFilter', STATE.userTypeFilter);
    params.set('sortField', STATE.sortField);
    params.set('sortOrder', STATE.sortOrder);
    if (STATE.search) params.set('search', STATE.search);
    if (STATE.showExpired) params.set('showExpired', STATE.showExpired);

    console.debug('Fetching coupons with params:', params.toString());
    const response = await fetch(`${BASE_URL}/admin/coupons/api/filtered/all?${params.toString()}`, {
      headers: { 'Content-Type': 'application/json' }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();
    console.debug('Fetch response:', data);

    if (data.success) {
      if (!data.coupons || !Array.isArray(data.coupons)) {
        throw new Error('Invalid coupons data: Expected an array');
      }
      updateTable(data.coupons, data.totalCoupons, data.totalPages);
      updatePagination(data.currentPage, data.totalPages);
      updateStats(data.coupons.length, data.totalCoupons);
      updateSortIndicators();
      updateHistory();
    } else {
      console.error('Fetch failed:', data.message);
      showError(data.message || 'Failed to fetch coupons');
    }
  } catch (error) {
    console.error('Error in refetchAndUpdateCoupons:', error);
    showError('Error loading coupons: ' + error.message);
  } finally {
    hideLoading();
  }
}

function updateTable(coupons, totalCoupons, totalPages) {
  const tableBody = document.querySelector('#coupons-table tbody');
  tableBody.innerHTML = '';

  if (coupons && coupons.length > 0) {
    coupons.forEach(coupon => {
      const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date();
      const isMaxedOut = coupon.usedCount >= coupon.maxUsage;
      const row = document.createElement('tr');
      row.className = `coupon-row ${coupon.isActive && !isExpired && !isMaxedOut ? '' : 'inactive-coupon'}`;
      row.dataset.couponId = coupon._id;

      row.innerHTML = `
        <td class="coupon-code">
          <div class="code-info">
            <span class="code-text">${coupon.code || 'N/A'}</span>
          </div>
        </td>
        <td class="coupon-discount">
          <span class="discount-value">${coupon.discount}% OFF (max: ${coupon.maxDiscount})</span>
                      ${isMaxedOut ? '<span class="usage-badge maxed-out">MAXED OUT</span>' : ''}
        </td>
        <td class="user-type">
          <span class="user-type-badge ${coupon.onlyFor}">
            ${coupon.onlyFor === 'all' ? 'All Users' : 
              coupon.onlyFor === 'newUsers' ? 'New Users' : 'VIP Users'}
          </span>
        </td>
        <td class="min-order">
          ${coupon.minOrderAmount > 0 
            ? `₹${coupon.minOrderAmount.toFixed(2)}` 
            : '<span class="text-muted">No minimum</span>'}
        </td>
        <td class="usage-stats">
          <div class="usage-info">
            <span class="usage-count">${coupon.usedCount} / ${coupon.maxUsage}</span>
            <div class="usage-bar">
              <div class="usage-progress" style="width: ${(coupon.usedCount / coupon.maxUsage) * 100}%"></div>
            </div>
          </div>
        </td>
        <td class="expiry-date">
          ${coupon.expiresAt 
            ? `<span class="date-text ${isExpired ? 'expired' : ''}">${new Date(coupon.expiresAt).toLocaleDateString()}</span>
               ${isExpired ? '<span class="expired-badge">EXPIRED</span>' : ''}`
            : '<span class="no-expiry">No expiry</span>'}
        </td>
        <td class="coupon-status">
          <div class="status-badges">
            <span class="status-badge ${coupon.isActive && !isExpired && !isMaxedOut ? 'active' : 'inactive'}">
              ${coupon.isActive && !isExpired && !isMaxedOut ? 'Active' : 
                isExpired ? 'Expired' : 
                isMaxedOut ? 'Maxed Out' : 'Inactive'}
            </span>
          </div>
        </td>
        <td class="coupon-actions">
          <div class="action-buttons">
            <button class="btn btn-sm btn-outline-primary edit-btn" 
                    onclick="openCouponModal('edit', '${coupon._id}')"
                    title="Edit Coupon">
              <i class="lni lni-pencil"></i>
              <span class="btn-text">Edit</span>
            </button>
            <button class="btn btn-sm ${coupon.isActive ? 'btn-outline-danger' : 'btn-outline-success'} toggle-status-btn" 
                    onclick="toggleStatus('${coupon._id}', '${coupon.code || 'Coupon'}', '${!coupon.isActive}')"
                    title="${coupon.isActive ? 'Deactivate' : 'Activate'} Coupon"
                    ${isExpired ? 'disabled' : ''}>
              <i class="lni lni-${coupon.isActive ? 'lock' : 'unlock'}"></i>
              <span class="btn-text">${coupon.isActive ? 'Deactivate' : 'Activate'}</span>
            </button>
          </div>
        </td>
      `;

      tableBody.appendChild(row);
    });
  } else {
    tableBody.innerHTML = `
      <tr class="no-data-row">
        <td colspan="8" class="no-data-cell">
          <div class="no-data-content">
            <div class="no-data-icon">
              <i class="lni lni-ticket"></i>
            </div>
            <p>No coupons found</p>
            ${STATE.search || STATE.status !== 'all' || STATE.userTypeFilter !== 'all' || STATE.showExpired
              ? '<button class="btn btn-link" onclick="resetFilters()">Clear filters</button>'
              : '<button class="btn btn-primary" onclick="openCouponModal(\'create\')"><i class="lni lni-plus"></i> Create First Coupon</button>'
            }
          </div>
        </td>
      </tr>
    `;
  }
}

function updatePagination(currentPage, totalPages) {
  STATE.page = currentPage;
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const pageInput = document.getElementById('page-number');
  const pageTotal = document.querySelector('.page-total');

  prevBtn.disabled = currentPage <= 1;
  nextBtn.disabled = currentPage >= totalPages;
  pageInput.value = currentPage;
  pageInput.max = totalPages;
  pageTotal.textContent = `of ${totalPages}`;

  prevBtn.setAttribute('onclick', `goToPage(${currentPage - 1})`);
  nextBtn.setAttribute('onclick', `goToPage(${currentPage + 1})`);
}

function updateStats(resultCount, totalCoupons) {
  const resultCountEl = document.getElementById('result-count');
  const totalCountEl = document.getElementById('total-count');

  resultCountEl.textContent = resultCount;
  totalCountEl.textContent = totalCoupons;
}

function updateSortIndicators() {
  const headers = document.querySelectorAll('.sortable-header');
  headers.forEach(header => {
    const content = header.querySelector('.header-content');
    const field = header.getAttribute('onclick').match(/'([^']+)'/)[1];
    const indicator = content.querySelector('.sort-indicator');

    if (field === STATE.sortField) {
      if (!indicator) {
        const span = document.createElement('span');
        span.className = 'sort-indicator';
        span.textContent = STATE.sortOrder === 'asc' ? '↑' : '↓';
        content.appendChild(span);
      } else {
        indicator.textContent = STATE.sortOrder === 'asc' ? '↑' : '↓';
      }
    } else if (indicator) {
      indicator.remove();
    }
  });

  const sortOrderBtn = document.getElementById('sort-order');
  sortOrderBtn.querySelector('.sort-icon').textContent = STATE.sortOrder === 'asc' ? '↑' : '↓';
}
</script>
