<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Products Management</title>

  <!-- Cropper (if needed) -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"/>

  <style>
    :root {
      --primary: #000;
      --primary-hover: #000;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
      --white: #ffffff;
      --radius: 8px;
      --radius-lg: 12px;
      --shadow-sm: 0 1px 2px rgba(0,0,0,0.05);
      --shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1);
      --shadow-lg: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1);
    }
    * { margin:0; padding:0; box-sizing:border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: var(--gray-50); color: var(--gray-900); line-height:1.5; }

    .products-management { min-height:100vh; padding:1rem; }
    .container-fluid { max-width:1400px; margin:0 auto; }
    .content-wrapper { display:flex; flex-direction:column; gap:1.5rem; }
    .page-card { background:var(--white); border-radius:var(--radius-lg); box-shadow:var(--shadow); overflow:hidden; }

    /* Header */
    .page-header { display:flex; align-items:center; justify-content:space-between; padding:1.5rem 2rem; border-bottom:1px solid var(--gray-200); background:var(--white); }
    .header-content { display:flex; align-items:center; gap:1.5rem; }
    .page-title { font-size:1.5rem; font-weight:600; }
    .stats-row { display:flex; align-items:center; gap:.5rem; font-size:.875rem; color:var(--gray-600); }
    .stat-badge { display:flex; align-items:center; gap:.25rem; }
    .stat-number { font-weight:600; color:var(--gray-900); }
    .stat-label { color:var(--gray-500); }
    .stat-divider { color:var(--gray-300); }

    .btn { display:inline-flex; align-items:center; gap:.5rem; padding:.5rem 1rem; border:none; border-radius:var(--radius); font-size:.875rem; font-weight:500; cursor:pointer; transition:all .2s; text-decoration:none; }
    .btn:disabled { opacity:.5; cursor:not-allowed; }
    .btn-primary { background:var(--primary); color:var(--white); }
    .btn-primary:hover:not(:disabled) { background:var(--primary-hover); }
    .btn-ghost { background:transparent; color:var(--gray-600); border:1px solid var(--gray-200); }
    .btn-ghost:hover:not(:disabled) { background:var(--gray-50); color:var(--gray-900); }
    .btn-danger { color:var(--danger); }
    .btn-danger:hover:not(:disabled) { background:var(--danger); color:var(--white); }
    .btn-sm { padding:.375rem .75rem; font-size:.8125rem; }
    .btn-add { padding:.75rem 1.5rem; }

    .message-container { padding:0 2rem; }
    .alert { padding:.75rem 1rem; border-radius:var(--radius); font-size:.875rem; display:none; margin:1rem 0; }
    .alert.show { display:block; }
    .alert-error { background:#fef2f2; color:#991b1b; border:1px solid #fecaca; }
    .alert-success { background:#f0fdf4; color:#166534; border:1px solid #bbf7d0; }

    /* Controls Panel */
    .controls-panel { padding:1.5rem 2rem; border-bottom:1px solid var(--gray-200); background:var(--gray-50); }
    .filters-grid { display:grid; grid-template-columns:2fr repeat(4,1fr) auto; gap:1rem; align-items:end; }
    .filter-item { display:flex; flex-direction:column; gap:.5rem; }
    .filter-label { font-size:.8125rem; font-weight:500; color:var(--gray-700); }
    .search-wrapper { display:flex; border:1px solid var(--gray-300); border-radius:var(--radius); overflow:hidden; background:var(--white); }
    .search-input { flex:1; padding:.75rem 1rem; border:none; outline:none; font-size:.875rem; }
    .search-btn { padding:.75rem; background:var(--primary); color:var(--white); border:none; cursor:pointer; transition:background .2s; }
    .search-btn:hover { background:var(--primary-hover); }
    .filter-select { padding:.75rem 1rem; border:1px solid var(--gray-300); border-radius:var(--radius); background:var(--white); font-size:.875rem; cursor:pointer; }
    .filter-select:focus { outline:none; border-color:var(--primary); box-shadow:0 0 0 3px rgba(37,99,235,0.1); }
    .sort-controls { display:flex; gap:.5rem; }
    .sort-toggle { padding:.75rem; border:1px solid var(--gray-300); border-radius:var(--radius); background:var(--white); cursor:pointer; transition:all .2s;}
    .sort-toggle:hover { background:var(--gray-50); }

    /* Pagination */
    .pagination-wrapper { display:flex; align-items:center; justify-content:space-between; padding:1rem 2rem; border-bottom:1px solid var(--gray-200); }
    .pagination-info { display:flex; align-items:center; gap:.5rem; font-size:.875rem; color:var(--gray-600); }
    .page-input { width:4rem; padding:.375rem .5rem; border:1px solid var(--gray-300); border-radius:var(--radius); text-align:center; }

    /* Products */
    .products-container { padding:2rem; }
    .table-view { display:block; }
    .products-table { width:100%; border-collapse:collapse; }
    .products-table th, .products-table td { padding:1rem; border-bottom:1px solid var(--gray-100); vertical-align:top; }
    .products-table th { background:var(--gray-50); font-size:.8125rem; font-weight:600; color:var(--gray-700); }
    .sortable { cursor:pointer; user-select:none; transition:background .2s; }
    .sortable:hover { background:var(--gray-100); }
    .sort-icon { font-size:.75rem; color:var(--primary); }

    .product-cell { min-width:250px; }
    .product-info { display:flex; gap Jonah; gap:1rem; align-items:center; }
    .product-image { position:relative; width:3rem; height:3rem; border-radius:var(--radius); overflow:hidden; background:var(--gray-100); flex-shrink:0; }
    .product-image img { width:100%; height:100%; object-fit:cover; }
    .image-placeholder { display:flex; align-items:center; justify-content:center; width:100%; height:100%; color:var(--gray-400); font-size:1.25rem; }
    .featured-badge { position:absolute; top:-.25rem; right:-.25rem; width:1rem; height:1rem; background:var(--warning); color:var(--white); border-radius:50%; display:flex; align-items:center; justify-content:center; font-size:.625rem; }
    .product-details { flex:1; min-width:0; }
    .product-name { font-size:.875rem; font-weight:600; color:var(--gray-900); margin-bottom:.25rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;}
    .product-brand { font-size:.75rem; color:var(--gray-500); }

    .price-cell { min-width:120px; }
    .price-info { display:flex; flex-direction:column; gap:.25rem; }
    .regular-price { font-size:.875rem; font-weight:600; color:var(--gray-900); }
    .sale-price { font-size:.75rem; color:var(--danger); text-decoration:line-through; }
    .discount-badge { font-size:.625rem; padding:.125rem .375rem; background:var(--danger); color:var(--white); border-radius:.25rem; }

    .stock-cell { min-width:80px; }
    .stock-badge { padding:.25rem .5rem; border-radius:.375rem; font-size:.75rem; font-weight:500; }
    .in-stock  { background:#d1fae5; color:#065f46; }
    .low-stock { background:#fef3c7; color:#92400e; }
    .out-of-stock{ background:#fee2e2; color:#991b1b; }

    .category-tag { padding:.25rem .5rem; background:var(--gray-100); color:var(--gray-700); border-radius:.375rem; font-size:.75rem; }

    .status-badge { padding:.25rem .5rem; border-radius:.375rem; font-size:.75rem; font-weight:500; }
    .status-badge.active   { background:#d1fae5; color:#065f46; }
    .status-badge.inactive { background:#fee2e2; color:#991b1b; }

    /* Variants Column */
    .variants-cell { min-width:150px; }
    .variants-info { display:flex; flex-direction:column; gap:.25rem; }
    .variants-count { font-size:.875rem; font-weight:600; color:var(--gray-900); }
    .variants-status { display:flex; gap:.25rem; flex-wrap:wrap; }
    .variant-badge { padding:.125rem .375rem; border-radius:.25rem; font-size:.625rem; font-weight:500; }
    .variant-active { background:#d1fae5; color:#065f46; }
    .variant-inactive { background:#fee2e2; color:#991b1b; }

    .actions-cell { min-width:180px; }
    .action-buttons { display:flex; gap:.25rem; flex-wrap:wrap; }

    /* Card view for mobile */
    .card-view { display:none; grid-template-columns:1fr; gap:1rem; }
    .product-card { background:var(--white); border:1px solid var(--gray-200); border-radius:var(--radius-lg); overflow:hidden; transition:box-shadow .2s; }
    .product-card:hover { box-shadow:var(--shadow-lg); }
    .card-header { display:flex; gap:1rem; padding:1rem; }
    .card-info { flex:1; min-width:0; }
    .card-title { font-size:1rem; font-weight:600; margin-bottom:.25rem; }
    .card-brand { font-size:.875rem; color:var(--gray-500); margin-bottom:.5rem; }
    .card-badges { display:flex; gap:.5rem; flex-wrap:wrap; }
    .card-body { padding:0 1rem 1rem; }
    .card-stats { display:grid; grid-template-columns:repeat(auto-fit, minmax(100px, 1fr)); gap:1rem; margin-bottom:1rem; }
    .card-stat { text-align:center; }
    .card-stat-value { font-size:1.125rem; font-weight:600; color:var(--gray-900); }
    .card-stat-label { font-size:.75rem; color:var(--gray-500); }
    .card-variants { margin-bottom:1rem; }
    .card-variants-title { font-size:.875rem; font-weight:600; margin-bottom:.5rem; }
    .card-variants-list { display:flex; gap:.25rem; flex-wrap:wrap; }
    .card-actions { display:flex; gap:.5rem; padding:1rem; border-top:1px solid var(--gray-100); background:var(--gray-50); flex-wrap:wrap; }

    .empty-state { text-align:center; padding:4rem 2rem; }
    .empty-icon { font-size:4rem; color:var(--gray-300); margin-bottom:1rem; }
    .empty-state h3 { font-size:1.125rem; font-weight:600; margin-bottom:.5rem; }
    .empty-state p  { color:var(--gray-500); margin-bottom:1.5rem; }

    /* Confirm Modal */
    .modal-overlay { position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1000; opacity:0; visibility:hidden; transition:all .3s ease; }
    .modal-overlay.active { opacity:1; visibility:visible; }
    .modal-container { background:var(--white); border-radius:var(--radius-lg); box-shadow:var(--shadow-lg); max-width:500px; width:90%; max-height:90vh; overflow:hidden; transform:scale(0.95); transition:transform .3s ease; }
    .modal-overlay.active .modal-container { transform:scale(1); }
    .modal-header { display:flex; align-items:center; justify-content:space-between; padding:1.5rem 2rem; border-bottom:1px solid var(--gray-200); }
    .modal-body   { padding:2rem; max-height:60vh; overflow-y:auto; }
    .modal-footer { display:flex; gap:1rem; justify-content:flex-end; padding:1.5rem 2rem; border-top:1px solid var(--gray-200); background:var(--gray-50); }
    .modal-close  { background:none; border:none; cursor:pointer; font-size:1.25rem; }

    /* Variant Details Modal */
    .variant-details-modal .modal-container { max-width:700px; }
    .variant-item { display:flex; align-items:center; justify-content:space-between; padding:1rem; border:1px solid var(--gray-200); border-radius:var(--radius); margin-bottom:.5rem; }
    .variant-info { flex:1; }
    .variant-name { font-weight:600; margin-bottom:.25rem; }
    .variant-meta { font-size:.875rem; color:var(--gray-600); }
    .variant-actions { display:flex; gap:.5rem; }

    /* Loading Overlay */
    .loading-overlay { position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(255,255,255,0.9); display:flex; align-items:center; justify-content:center; z-index:2000; opacity:0; visibility:hidden; transition:all .3s ease; }
    .loading-overlay.active { opacity:1; visibility:visible; }
    .loading-spinner .spinner { width:2rem; height:2rem; border:2px solid var(--gray-200); border-top:2px solid var(--primary); border-radius:50%; animation:spin 1s linear infinite; margin:0 auto 1rem; }
    @keyframes spin { from{transform:rotate(0)} to{transform:rotate(360deg);} }

    /* Icons (using simple content fallback) */
    .icon-plus:before        { content: "+"; }
    .icon-chevron-left:before{ content: "‹"; }
    .icon-chevron-right:before{ content: "›"; }
    .icon-refresh:before     { content: "🔄"; }
    .icon-image:before       { content: "📦"; }
    .icon-x:before           { content: "×"; }
    .icon-star:before        { content: "☆"; }
    .icon-star-filled:before { content: "★"; }
    .icon-eye:before         { content: "👁️"; }
    .icon-eye-off:before     { content: "🙈"; }
    .icon-edit:before        { content: "✏️"; }
    .icon-variants:before    { content: "🔧"; }
    .icon-arrow-up:before    { content: "↑"; }
    .icon-arrow-down:before  { content: "↓"; }

    @media (max-width:1200px) {
      .filters-grid { grid-template-columns:1fr 1fr 1fr; }
      .filter-item:first-child { grid-column: 1 / -1; }
    }
    @media (max-width:768px) {
      .table-view { display:none; }
      .card-view { display:grid; }
      .page-header { flex-direction:column; gap:1rem; text-align:center; }
      .header-content { flex-direction:column; gap:.5rem; }
      .filters-grid { grid-template-columns:1fr; }
      .pagination-wrapper { flex-direction:column; gap:1rem; }
      .card-actions { justify-content:center; }
    }
    @media (max-width:480px) {
      .products-management { padding:.5rem; }
      .page-header { padding:1rem; }
      .controls-panel { padding:1rem; }
      .products-container { padding:1rem; }
      .card-stats { grid-template-columns:1fr 1fr; }
    }
  </style>
</head>

<body>
  <section class="products-management">
    <div class="container-fluid">
      <!-- Loading overlay -->
      <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner">
          <div class="spinner"></div>
          <p>Loading...</p>
        </div>
      </div>

      <div class="content-wrapper">
        <div class="page-card">
          <!-- Header -->
          <div class="page-header">
            <div class="header-content">
              <h1 class="page-title">Products</h1>
              <div class="stats-row">
                <span class="stat-badge">
                  <span class="stat-number" id="showing-count"><%= products.length %></span>
                  <span class="stat-label">Showing</span>
                </span>
                <span class="stat-divider">/</span>
                <span class="stat-badge">
                  <span class="stat-number" id="total-count"><%= totalProducts %></span>
                  <span class="stat-label">Total</span>
                </span>
              </div>
            </div>
            <a href="/admin/products/create" class="btn btn-primary btn-add">
              <i class="icon-plus"></i><span>Add Product</span>
            </a>
          </div>

          <!-- Messages -->
          <div class="message-container">
            <% if (messages && messages.error && messages.error.length > 0) { %>
              <div class="alert alert-error show" id="error-msg"><%= messages.error[0] %></div>
            <% } %>
            <% if (messages && messages.success && messages.success.length > 0) { %>
              <div class="alert alert-success show" id="success-msg"><%= messages.success[0] %></div>
            <% } %>
            <div class="alert alert-error" id="dynamic-error-msg"></div>
            <div class="alert alert-success" id="dynamic-success-msg"></div>
          </div>

          <!-- Filters -->
          <div class="controls-panel">
            <div class="filters-grid">
              <!-- Search -->
              <div class="filter-item search-filter">
                <form id="search-form">
                  <div class="search-wrapper">
                    <input type="text" id="search-input" class="search-input" name="search" placeholder="Search products…" value="<%= search||'' %>">
                    <button type="submit" class="search-btn">

<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 11.998C2 6.89029 6.14154 2.75 11.25 2.75C16.3585 2.75 20.5 6.89029 20.5 11.998C20.5 14.2826 19.6714 16.3737 18.2983 17.9873L21.7791 21.4685C22.072 21.7614 22.072 22.2363 21.7791 22.5292C21.4862 22.822 21.0113 22.822 20.7184 22.5291L17.2372 19.0476C15.6237 20.4187 13.5334 21.2459 11.25 21.2459C6.14154 21.2459 2 17.1056 2 11.998ZM11.25 4.25C6.96962 4.25 3.5 7.71905 3.5 11.998C3.5 16.2769 6.96962 19.7459 11.25 19.7459C15.5304 19.7459 19 16.2769 19 11.998C19 7.71905 15.5304 4.25 11.25 4.25Z" fill="#fff"/>
<path opacity="0.4" d="M11.25 5.74902C10.8358 5.74902 10.5 6.08481 10.5 6.49902C10.5 6.91324 10.8358 7.24902 11.25 7.24902C13.8742 7.24902 16.0013 9.37584 16.0013 11.999C16.0013 12.4132 16.3371 12.749 16.7513 12.749C17.1655 12.749 17.5013 12.4132 17.5013 11.999C17.5013 8.54707 14.7023 5.74902 11.25 5.74902Z" fill="#fff"/>
</svg>



                    </button>
                  </div>
                </form>
              </div>

              <!-- Status -->
              <div class="filter-item">
                <label class="filter-label">Status</label>
                <select id="status-filter" class="filter-select">
                  <option value="all"   <%= status==='all'   ? 'selected':'' %>>All</option>
                  <option value="active"<%= status==='active'? 'selected':'' %>>Active</option>
                  <option value="inactive"<%= status==='inactive'? 'selected':'' %>>Inactive</option>
                </select>
              </div>

              <!-- Category -->
              <div class="filter-item">
                <label class="filter-label">Category</label>
                <select id="category-filter" class="filter-select">
                  <option value="all"<%= categoryFilter==='all'?'selected':'' %>>All Categories</option>
                  <% categories.forEach(cat=>{ %>
                    <option value="<%=cat._id%>" <%=categoryFilter==cat._id?'selected':''%>><%=cat.name%></option>
                  <% }) %>
                </select>
              </div>

              <!-- Brand -->
              <div class="filter-item">
                <label class="filter-label">Brand</label>
                <select id="brand-filter" class="filter-select">
                  <option value="all"<%=brandFilter==='all'?'selected':''%>>All Brands</option>
                  <% brands.forEach(br=>{ %>
                    <option value="<%=br._id%>" <%=brandFilter==br._id?'selected':''%>><%=br.name%></option>
                  <% }) %>
                </select>
              </div>

              <!-- Sort -->
              <div class="filter-item">
                <label class="filter-label">Sort</label>
                <div class="sort-controls">
                  <select id="sort-field" class="filter-select">
                    <option value="name"       <%=sortField==='name'?'selected':''%>>Name</option>
                    <option value="regularPrice"<%=sortField==='regularPrice'?'selected':''%>>Price</option>
                    <option value="stock"      <%=sortField==='stock'?'selected':''%>>Stock</option>
                    <option value="createdAt"  <%=sortField==='createdAt'?'selected':''%>>Date</option>
                  </select>
                  <button id="sort-order" class="sort-toggle"><i class="icon-<%=sortOrder==='asc'?'arrow-up':'arrow-down'%>"></i></button>
                </div>
              </div>

              <!-- Reset -->
              <div class="filter-item">
                <button id="reset-filters" class="btn btn-ghost btn-reset"><i class="icon-refresh"></i><span>Reset</span></button>
              </div>
            </div>
          </div>

          <div class="pagination-wrapper">
            <div class="pagination-info">
              <span>Page</span>
              <input type="number" id="page-input" class="page-input" min="1" max="<%=totalPages%>" value="<%=currentPage%>">
              <span>of <span id="total-pages"><%=totalPages%></span></span>
            </div>
            <div class="pagination-controls">
              <button class="btn btn-ghost btn-sm" id="prev-btn" <%=currentPage<=1?'disabled':''%>><i class="icon-chevron-left"></i></button>
              <button class="btn btn-ghost btn-sm" id="next-btn" <%=currentPage>=totalPages?'disabled':''%>><i class="icon-chevron-right"></i></button>
            </div>
          </div>
<div class="products-container">
  <div class="table-view" id="table-view">
    <table class="products-table">
      <thead>
        <tr>
          <th class="sortable" onclick="setSortField('name')">Product <i class="sort-icon"></i></th>
          <th class="sortable" onclick="setSortField('regularPrice')">Price <i class="sort-icon"></i></th>
          <th class="sortable" onclick="setSortField('stock')">Stock <i class="sort-icon"></i></th>
          <th>Category</th>
          <th>Variants</th>
          <th>Status</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="table-body">
        <tr class="empty-state">
          <td colspan="7" class="empty-state">
            <div class="empty-icon">📦</div>
            <h3>No products found</h3>
            <p>Get started by adding your first product</p>
            <a href="/admin/products/create" class="btn btn-primary"><i class="icon-plus"></i><span>Add Product</span></a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="card-view" id="card-view">
    <!-- Card view will be populated dynamically -->
  </div>
</div>

</div>
      </div>
    </div>
  </section>

  <!-- Confirmation Modal -->
  <div class="modal-overlay" id="confirm-modal">
    <div class="modal-container">
      <div class="modal-header">
        <h3 id="confirm-title">Confirm Action</h3>
        <button class="modal-close" onclick="closeConfirmModal()"><i class="icon-x"></i></button>
      </div>
      <div class="modal-body">
        <p id="confirm-message">Are you sure?</p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-ghost" onclick="closeConfirmModal()">Cancel</button>
        <button class="btn btn-danger" id="confirm-button" onclick="confirmAction()">Confirm</button>
      </div>
    </div>
  </div>

  <!-- Variant Details Modal -->
  <div class="modal-overlay variant-details-modal" id="variant-modal">
    <div class="modal-container">
      <div class="modal-header">
        <h3 id="variant-modal-title">Product Variants</h3>
        <button class="modal-close" onclick="closeVariantModal()"><i class="icon-x"></i></button>
      </div>
      <div class="modal-body" id="variant-modal-body">
        <!-- Variants will be loaded here -->
      </div>
      <div class="modal-footer">
        <button class="btn btn-ghost" onclick="closeVariantModal()">Close</button>
      </div>
    </div>
  </div>

<script>
  const BASE_URL = window.location.origin;

const STATE = {
  page: parseInt(new URLSearchParams(window.location.search).get('page')) || 1,
  status: new URLSearchParams(window.location.search).get('status') || 'all',
  categoryFilter: new URLSearchParams(window.location.search).get('categoryFilter') || 'all',
  brandFilter: new URLSearchParams(window.location.search).get('brandFilter') || 'all',
  sortField: new URLSearchParams(window.location.search).get('sortField') || 'createdAt',
  sortOrder: new URLSearchParams(window.location.search).get('sortOrder') || 'desc',
  search: new URLSearchParams(window.location.search).get('search') || '',
  pendingAction: null,
  isLoading: false
};

// Utility functions
function showLoading() {
  if (!STATE.isLoading) {
    STATE.isLoading = true;
    const overlay = document.getElementById('loading-overlay');
    overlay.style.display = 'flex';
    setTimeout(() => {
      overlay.classList.add('active');
    }, 10);
  }
}

function hideLoading() {
  if (STATE.isLoading) {
    const overlay = document.getElementById('loading-overlay');
    overlay.classList.remove('active');
    setTimeout(() => {
      overlay.style.display = 'none';
      STATE.isLoading = false;
    }, 300); // Match CSS transition duration
  }
}

function showError(msg) {
  const e = document.getElementById('dynamic-error-msg');
  if (e) {
    e.textContent = msg;
    e.classList.add('show');
    setTimeout(() => e.classList.remove('show'), 5000);
  }
}

function showSuccess(msg) {
  const e = document.getElementById('dynamic-success-msg');
  if (e) {
    e.textContent = msg;
    e.classList.add('show');
    setTimeout(() => e.classList.remove('show'), 5000);
  }
}

// Fetch products
async function fetchProducts(overrides = {}) {
  showLoading();
  try {
    const url = buildUrl(overrides);
    console.log('Fetching products with URL:', url); // Debug log
    const res = await fetch(url, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
    });

    if (!res.ok) {
      throw new Error(`HTTP error! Status: ${res.status}`);
    }

    const json = await res.json();
    console.log('API response:', json); // Debug log

    if (json.success) {
      updateUI(json);
    } else {
      showError(json.message || 'Error loading products');
    }
  } catch (e) {
    showError('Error loading products. Please try again.');
    console.error('Fetch error:', e);
  } finally {
    hideLoading();
  }
}

// Build URL
function buildUrl(overrides = {}) {
  const p = {
    page: overrides.page || STATE.page,
    status: overrides.status || STATE.status,
    categoryFilter: overrides.categoryFilter || STATE.categoryFilter,
    brandFilter: overrides.brandFilter || STATE.brandFilter,
    sortField: overrides.sortField || STATE.sortField,
    sortOrder: overrides.sortOrder || STATE.sortOrder,
    search: overrides.search !== undefined ? overrides.search : STATE.search
  };

  const url = new URL('/admin/products/api/all', BASE_URL);
  Object.entries(p).forEach(([k, v]) => {
    if (v && v !== 'all') url.searchParams.set(k, v);
  });

  return url.toString();
}

// Update UI
function updateUI(data) {
  // Update header stats
  document.getElementById('showing-count').textContent = data.data?.length || 0;
  document.getElementById('total-count').textContent = data.totalProducts || 0;

  // Update pagination
  document.getElementById('page-input').value = data.currentPage || 1;
  document.getElementById('page-input').max = data.totalPages || 1;
  document.getElementById('total-pages').textContent = data.totalPages || 1;
  document.getElementById('prev-btn').disabled = (data.currentPage || 1) <= 1;
  document.getElementById('next-btn').disabled = (data.currentPage || 1) >= (data.totalPages || 1);

  // Update category filter
  const categoryFilter = document.getElementById('category-filter');
  categoryFilter.innerHTML = `<option value="all" ${STATE.categoryFilter === 'all' ? 'selected' : ''}>All Categories</option>`;
  if (data.categories) {
    data.categories.forEach(cat => {
      categoryFilter.innerHTML += `<option value="${cat._id}" ${STATE.categoryFilter === cat._id ? 'selected' : ''}>${cat.name}</option>`;
    });
  }

  // Update brand filter
  const brandFilter = document.getElementById('brand-filter');
  brandFilter.innerHTML = `<option value="all" ${STATE.brandFilter === 'all' ? 'selected' : ''}>All Brands</option>`;
  if (data.brands) {
    data.brands.forEach(br => {
      brandFilter.innerHTML += `<option value="${br._id}" ${STATE.brandFilter === br._id ? 'selected' : ''}>${br.name}</option>`;
    });
  }

  // Update table and card views
  const tableBody = document.getElementById('table-body');
  const cardView = document.getElementById('card-view');

  if (!tableBody || !cardView) {
    console.error('Table body or card view not found in DOM');
    showError('Error rendering products. Please refresh the page.');
    return;
  }

  // Handle empty state
  if (!data.data || data.data.length === 0) {
    tableBody.innerHTML = `
      <tr class="empty-state">
        <td colspan="7" class="empty-state">
          <div class="empty-icon">📦</div>
          <h3>No products found</h3>
          <p>Get started by adding your first product</p>
          ${STATE.search || STATE.status !== 'all' || STATE.categoryFilter !== 'all' || STATE.brandFilter !== 'all' ?
            '<button class="btn btn-ghost" onclick="resetFilters()">Clear filters</button>' :
            '<a href="/admin/products/create" class="btn btn-primary"><i class="icon-plus"></i><span>Add Product</span></a>'
          }
        </td>
      </tr>`;
    cardView.innerHTML = '';
    return;
  }

  // Render products
  tableBody.innerHTML = data.data.map(product => `
    <tr data-product-id="${product._id}">
      <td class="product-cell">
        <div class="product-info">
          <div class="product-image">
            ${product.images && product.images.length > 0 ?
              `<img src="${product.images[0]}" alt="${product.name}" loading="lazy">` :
              `<div class="image-placeholder"><i class="icon-image"></i></div>`}
            ${product.isFeatured ? `<span class="featured-badge"><i class="icon-star-filled"></i></span>` : ''}
          </div>
          <div class="product-details">
            <h3 class="product-name">${product.name}</h3>
            ${product.brand ? `<span class="product-brand">${product.brand.name}</span>` : ''}
          </div>
        </div>
      </td>
      <td class="price-cell">
        <div class="price-info">
          ${product.salePrice > 0 && product.salePrice < product.regularPrice ?
            `<span class="regular-price">₹${product.salePrice.toFixed(2)}</span>
             <span class="sale-price">₹${product.regularPrice.toFixed(2)}</span>
             <span class="discount-badge">${Math.round(((product.regularPrice - product.salePrice) / product.regularPrice) * 100)}% OFF</span>` :
            `<span class="regular-price">₹${product.regularPrice.toFixed(2)}</span>`}
        </div>
      </td>
      <td class="stock-cell">
        <span class="stock-badge ${product.stock <= 0 ? 'out-of-stock' : product.stock <= 10 ? 'low-stock' : 'in-stock'}">
          ${product.stock}
        </span>
      </td>
      <td>
        ${product.category ? `<span class="category-tag">${product.category.name}</span>` : ''}
      </td>
      <td class="variants-cell">
        <div class="variants-info">
          <div class="variants-count">${product.variants ? product.variants.length : 0} variants</div>
          ${product.variants && product.variants.length > 0 ? `
            <div class="variants-status">
              ${product.variants.filter(v => v.isActive).length > 0 ?
                `<span class="variant-badge variant-active">${product.variants.filter(v => v.isActive).length} active</span>` : ''}
              ${product.variants.length - product.variants.filter(v => v.isActive).length > 0 ?
                `<span class="variant-badge variant-inactive">${product.variants.length - product.variants.filter(v => v.isActive).length} inactive</span>` : ''}
            </div>` : ''}
        </div>
      </td>
      <td>
        <span class="status-badge ${product.isActive ? 'active' : 'inactive'}">
          ${product.isActive ? 'Active' : 'Inactive'}
        </span>
      </td>
      <td class="actions-cell">
        <div class="action-buttons">
          <a href="/admin/products/edit/${product._id}" class="btn btn-ghost btn-sm" title="Edit">
            <i class="icon-edit"></i>
          </a>
          <button class="btn btn-ghost btn-sm feature-btn" onclick="toggleFeatured('${product._id}', '${product.name}', '${product.isFeatured}')" title="${product.isFeatured ? 'Unfeature' : 'Feature'}">
            <i class="icon-${product.isFeatured ? 'star-filled' : 'star'}"></i>
          </button>
          <button class="btn btn-ghost btn-sm status-btn" onclick="toggleStatus('${product._id}', '${product.name}', '${product.isActive}')" title="${product.isActive ? 'Deactivate' : 'Activate'}">
            <i class="icon-${product.isActive ? 'eye-off' : 'eye'}"></i>
          </button>
        </div>
      </td>
    </tr>
  `).join('');

  cardView.innerHTML = data.data.map(product => `
    <div class="product-card" data-product-id="${product._id}">
      <div class="card-header">
        <div class="product-image">
          ${product.images && product.images.length > 0 ?
            `<img src="${product.images[0]}" alt="${product.name}" loading="lazy">` :
            `<div class="image-placeholder"><i class="icon-image"></i></div>`}
          ${product.isFeatured ? `<span class="featured-badge"><i class="icon-star-filled"></i></span>` : ''}
        </div>
        <div class="card-info">
          <h3 class="card-title">${product.name}</h3>
          ${product.brand ? `<div class="card-brand">${product.brand.name}</div>` : ''}
          <div class="card-badges">
            <span class="status-badge ${product.isActive ? 'active' : 'inactive'}">
              ${product.isActive ? 'Active' : 'Inactive'}
            </span>
            ${product.category ? `<span class="category-tag">${product.category.name}</span>` : ''}
          </div>
        </div>
      </div>
      <div class="card-body">
        <div class="card-stats">
          <div class="card-stat">
            <div class="card-stat-value">
              ${product.salePrice > 0 && product.salePrice < product.regularPrice ?
                `₹${product.salePrice.toFixed(2)}` :
                `₹${product.regularPrice.toFixed(2)}`}
            </div>
            <div class="card-stat-label">Price</div>
          </div>
          <div class="card-stat">
            <div class="card-stat-value ${product.stock <= 0 ? 'text-red-600' : product.stock <= 10 ? 'text-yellow-600' : ''}">
              ${product.stock}
            </div>
            <div class="card-stat-label">Stock</div>
          </div>
          <div class="card-stat">
            <div class="card-stat-value">${product.variants ? product.variants.length : 0}</div>
            <div class="card-stat-label">Variants</div>
          </div>
        </div>
        ${product.variants && product.variants.length > 0 ? `
          <div class="card-variants">
            <div class="card-variants-title">Variant Status</div>
            <div class="card-variants-list">
              ${product.variants.filter(v => v.isActive).length > 0 ?
                `<span class="variant-badge variant-active">${product.variants.filter(v => v.isActive).length} active</span>` : ''}
              ${product.variants.length - product.variants.filter(v => v.isActive).length > 0 ?
                `<span class="variant-badge variant-inactive">${product.variants.length - product.variants.filter(v => v.isActive).length} inactive</span>` : ''}
            </div>
          </div>` : ''}
      </div>
      <div class="card-actions">
        <a href="/admin/products/edit/${product._id}" class="btn btn-ghost btn-sm">
          <i class="icon-edit"></i> Edit
        </a>
        <button class="btn btn-ghost btn-sm feature-btn" onclick="toggleFeatured('${product._id}', '${product.name}', '${product.isFeatured}')">
          <i class="icon-${product.isFeatured ? 'star-filled' : 'star'}"></i>
        </button>
        <button class="btn btn-ghost btn-sm status-btn" onclick="toggleStatus('${product._id}', '${product.name}', '${product.isActive}')">
          <i class="icon-${product.isActive ? 'eye-off' : 'eye'}"></i>
        </button>
      </div>
    </div>
  `).join('');

  // Update sort indicators
  document.querySelectorAll('.sortable .sort-icon').forEach(icon => {
    icon.className = 'sort-icon';
  });
  const activeSort = document.querySelector(`.sortable[onclick="setSortField('${STATE.sortField}')"] .sort-icon`);
  if (activeSort) {
    activeSort.className = `sort-icon icon-${STATE.sortOrder === 'asc' ? 'arrow-up' : 'arrow-down'}`;
  }
  document.getElementById('sort-order').innerHTML = `<i class="icon-${STATE.sortOrder === 'asc' ? 'arrow-up' : 'arrow-down'}"></i>`;
}

// Go to page
async function goToPage(n) {
  const max = parseInt(document.getElementById('total-pages').textContent) || 1;
  if (n < 1 || n > max) return;
  STATE.page = n;
  await fetchProducts({ page: n });
  // window.history.pushState({}, '', buildUrl({ page: n }));
}

// Set sort field
async function setSortField(f) {
  const o = (STATE.sortField === f && STATE.sortOrder === 'asc') ? 'desc' : 'asc';
  STATE.sortField = f;
  STATE.sortOrder = o;
  STATE.page = 1;
  await fetchProducts({ sortField: f, sortOrder: o, page: 1 });
  // window.history.pushState({}, '', buildUrl({ sortField: f, sortOrder: o, page: 1 }));
}

// Reset filters
async function resetFilters() {
  STATE.page = 1;
  STATE.status = 'all';
  STATE.categoryFilter = 'all';
  STATE.brandFilter = 'all';
  STATE.sortField = 'createdAt';
  STATE.sortOrder = 'desc';
  STATE.search = '';

  document.getElementById('search-input').value = '';
  document.getElementById('status-filter').value = 'all';
  document.getElementById('category-filter').value = 'all';
  document.getElementById('brand-filter').value = 'all';
  document.getElementById('sort-field').value = 'createdAt';
  document.getElementById('sort-order').innerHTML = `<i class="icon-arrow-down"></i>`;

  await fetchProducts();
  // window.history.pushState({}, '', buildUrl());
}

// Show confirmation modal
function showConfirmModal(title, msg, btnText, cb) {
  document.getElementById('confirm-title').textContent = title;
  document.getElementById('confirm-message').textContent = msg;
  document.getElementById('confirm-button').textContent = btnText;
  STATE.pendingAction = cb;
  document.getElementById('confirm-modal').classList.add('active');
  document.body.style.overflow = 'hidden';
}

// Close confirmation modal
function closeConfirmModal() {
  document.getElementById('confirm-modal').classList.remove('active');
  document.body.style.overflow = '';
  STATE.pendingAction = null;
}

// Confirm action
function confirmAction() {
  if (STATE.pendingAction) STATE.pendingAction();
  closeConfirmModal();
}

// Toggle featured status
function toggleFeatured(id, name, isFeat) {
  const action = isFeat === 'true' ? 'Unfeature' : 'Feature';
  showConfirmModal(`${action} "${name}"`, `Are you sure?`, action, () => performToggleFeatured(id, isFeat));
}

// Perform toggle featured
async function performToggleFeatured(id, feat) {
  if (STATE.isLoading) return;
  showLoading();
  try {
    const res = await fetch(`${BASE_URL}/admin/products/toggle-featured/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ featured: feat === 'true' ? false : true })
    });
    const json = await res.json();
    if (json.success) {
      showSuccess(`Product ${feat === 'true' ? 'unfeatured' : 'featured'} successfully`);
      const productRow = document.querySelector(`tr[data-product-id="${id}"]`);
      const productCard = document.querySelector(`.product-card[data-product-id="${id}"]`);
      const newState = feat === 'true' ? 'false' : 'true';

      if (productRow) {
        const featureBtn = productRow.querySelector('.feature-btn');
        featureBtn.innerHTML = `<i class="icon-${newState === 'true' ? 'star-filled' : 'star'}"></i>`;
        featureBtn.setAttribute('onclick', `toggleFeatured('${id}', '${productRow.querySelector('.product-name').textContent}', '${newState}')`);
        featureBtn.title = newState === 'true' ? 'Unfeature' : 'Feature';
        const badge = productRow.querySelector('.featured-badge');
        if (newState === 'true' && !badge) {
          const imageDiv = productRow.querySelector('.product-image');
          imageDiv.insertAdjacentHTML('beforeend', `<span class="featured-badge"><i class="icon-star-filled"></i></span>`);
        } else if (newState === 'false' && badge) {
          badge.remove();
        }
      }

      if (productCard) {
        const featureBtn = productCard.querySelector('.feature-btn');
        featureBtn.innerHTML = `<i class="icon-${newState === 'true' ? 'star-filled' : 'star'}"></i>`;
        featureBtn.setAttribute('onclick', `toggleFeatured('${id}', '${productCard.querySelector('.card-title').textContent}', '${newState}')`);
        featureBtn.title = newState === 'true' ? 'Unfeature' : 'Feature';
        const badge = productCard.querySelector('.featured-badge');
        if (newState === 'true' && !badge) {
          const imageDiv = productCard.querySelector('.product-image');
          imageDiv.insertAdjacentHTML('beforeend', `<span class="featured-badge"><i class="icon-star-filled"></i></span>`);
        } else if (newState === 'false' && badge) {
          badge.remove();
        }
      }
    } else {
      showError(json.message || 'Error updating featured status');
    }
  } catch (e) {
    showError('Error updating featured status');
    console.error(e);
  } finally {
    hideLoading();
  }
}

// Toggle status
function toggleStatus(id, name, isActive) {
  const action = isActive === 'true' ? 'Deactivate' : 'Activate';
  showConfirmModal(`${action} "${name}"`, `Are you sure?`, action, () => performToggleStatus(id, isActive));
}

// Perform toggle status
async function performToggleStatus(id, act) {
  if (STATE.isLoading) return;
  showLoading();
  try {
    const res = await fetch(`${BASE_URL}/admin/products/toggle-status/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ active: act === 'true' ? false : true })
    });
    const json = await res.json();
    if (json.success) {
      showSuccess(`Product ${act === 'true' ? 'deactivated' : 'activated'} successfully`);
      const productRow = document.querySelector(`tr[data-product-id="${id}"]`);
      const productCard = document.querySelector(`.product-card[data-product-id="${id}"]`);
      const newState = act === 'true' ? 'false' : 'true';

      if (productRow) {
        const statusBadge = productRow.querySelector('.status-badge');
        statusBadge.className = `status-badge ${newState === 'true' ? 'active' : 'inactive'}`;
        statusBadge.textContent = newState === 'true' ? 'Active' : 'Inactive';
        const statusBtn = productRow.querySelector('.status-btn');
        statusBtn.innerHTML = `<i class="icon-${newState === 'true' ? 'eye-off' : 'eye'}"></i>`;
        statusBtn.setAttribute('onclick', `toggleStatus('${id}', '${productRow.querySelector('.product-name').textContent}', '${newState}')`);
        statusBtn.title = newState === 'true' ? 'Deactivate' : 'Activate';
      }

      if (productCard) {
        const statusBadge = productCard.querySelector('.status-badge');
        statusBadge.className = `status-badge ${newState === 'true' ? 'active' : 'inactive'}`;
        statusBadge.textContent = newState === 'true' ? 'Active' : 'Inactive';
        const statusBtn = productCard.querySelector('.status-btn');
        statusBtn.innerHTML = `<i class="icon-${newState === 'true' ? 'eye-off' : 'eye'}"></i>`;
        statusBtn.setAttribute('onclick', `toggleStatus('${id}', '${productCard.querySelector('.card-title').textContent}', '${newState}')`);
        statusBtn.title = newState === 'true' ? 'Deactivate' : 'Activate';
      }
    } else {
      showError(json.message || 'Error updating status');
    }
  } catch (e) {
    showError('Error updating status');
    console.error(e);
  } finally {
    hideLoading();
  }
}

// Show variant details
async function showVariantDetails(productId, productName) {
  document.getElementById('variant-modal-title').textContent = `${productName} - Variants`;
  document.getElementById('variant-modal-body').innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>Loading variants...</p></div>';
  document.getElementById('variant-modal').classList.add('active');
  document.body.style.overflow = 'hidden';

  try {
    const res = await fetch(`${BASE_URL}/admin/products/variants/${productId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
    });
    const json = await res.json();

    if (json.success && json.variants) {
      renderVariants(json.variants, productId);
    } else {
      document.getElementById('variant-modal-body').innerHTML = '<p>No variants found for this product.</p>';
    }
  } catch (e) {
    document.getElementById('variant-modal-body').innerHTML = '<p>Error loading variants.</p>';
    console.error('Error fetching variants:', e);
  }
}

// Render variants
function renderVariants(variants, productId) {
  const container = document.getElementById('variant-modal-body');
  if (!variants.length) {
    container.innerHTML = '<p>No variants found for this product.</p>';
    return;
  }

  const html = variants.map((variant, index) => `
    <div class="variant-item">
      <div class="variant-info">
        <div class="variant-name">${variant.size.toUpperCase()} - ${variant.color}</div>
        <div class="variant-meta">
          Price: ₹${variant.price.toFixed(2)} | 
          Stock: ${variant.stock} | 
          Status: <span class="status-badge ${variant.isActive ? 'active' : 'inactive'}">${variant.isActive ? 'Active' : 'Inactive'}</span>
        </div>
      </div>
      <div class="variant-actions">
        <button class="btn btn-ghost btn-sm" 
          onclick="toggleVariantStatus('${productId}', ${index}, '${variant.size} - ${variant.color}', ${variant.isActive})"
          title="${variant.isActive ? 'Deactivate' : 'Activate'} Variant">
          <i class="icon-${variant.isActive ? 'eye-off' : 'eye'}"></i>
        </button>
      </div>
    </div>
  `).join('');

  container.innerHTML = html;
}

// Toggle variant status
async function toggleVariantStatus(productId, variantIndex, variantName, isActive) {
  const action = isActive ? 'Deactivate' : 'Activate';
  showConfirmModal(
    `${action} Variant "${variantName}"`,
    `Are you sure you want to ${action.toLowerCase()} this variant?`,
    action,
    () => performToggleVariantStatus(productId, variantIndex, isActive)
  );
}

// Perform toggle variant status
async function performToggleVariantStatus(productId, variantIndex, isActive) {
  if (STATE.isLoading) return;
  showLoading();
  try {
    const res = await fetch(`${BASE_URL}/admin/products/toggle-variant-status/${productId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        variantIndex: variantIndex,
        isActive: !isActive 
      })
    });
    const json = await res.json();
    if (json.success) {
      showSuccess('Variant status updated successfully');
      showVariantDetails(productId, document.querySelector(`[data-product-id="${productId}"] .product-name, [data-product-id="${productId}"] .card-title`).textContent);
      if (json.variants) {
        const activeVariants = json.variants.filter(v => v.isActive).length;
        const inactiveVariants = json.variants.length - activeVariants;

        const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
        const productCard = document.querySelector(`.product-card[data-product-id="${productId}"]`);

        if (productRow) {
          const variantsStatus = productRow.querySelector('.variants-status');
          variantsStatus.innerHTML = `
            ${activeVariants > 0 ? `<span class="variant-badge variant-active">${activeVariants} active</span>` : ''}
            ${inactiveVariants > 0 ? `<span class="variant-badge variant-inactive">${inactiveVariants} inactive</span>` : ''}
          `;
        }

        if (productCard) {
          const variantsList = productCard.querySelector('.card-variants-list');
          if (variantsList) {
            variantsList.innerHTML = `
              ${activeVariants > 0 ? `<span class="variant-badge variant-active">${activeVariants} active</span>` : ''}
              ${inactiveVariants > 0 ? `<span class="variant-badge variant-inactive">${inactiveVariants} inactive</span>` : ''}
            `;
          }
        }
      }
    } else {
      showError(json.message || 'Error updating variant status');
    }
  } catch (e) {
    showError('Error updating variant status');
    console.error(e);
  } finally {
    hideLoading();
  }
}

// Initialize page
async function initializePage() {
  showLoading();
  const params = new URLSearchParams(window.location.search);
  STATE.page = parseInt(params.get('page')) || 1;
  STATE.status = params.get('status') || 'all';
  STATE.categoryFilter = params.get('categoryFilter') || 'all';
  STATE.brandFilter = params.get('brandFilter') || 'all';
  STATE.sortField = params.get('sortField') || 'createdAt';
  STATE.sortOrder = params.get('sortOrder') || 'desc';
  STATE.search = params.get('search') || '';

  document.getElementById('search-input').value = STATE.search;
  document.getElementById('status-filter').value = STATE.status;
  document.getElementById('category-filter').value = STATE.categoryFilter;
  document.getElementById('brand-filter').value = STATE.brandFilter;
  document.getElementById('sort-field').value = STATE.sortField;
  document.getElementById('sort-order').innerHTML = `<i class="icon-${STATE.sortOrder === 'asc' ? 'arrow-up' : 'arrow-down'}"></i>`;

  await fetchProducts();
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
  initializePage();

  document.getElementById('status-filter').addEventListener('change', async e => {
    STATE.status = e.target.value;
    STATE.page = 1;
    console.log('Status filter changed:', e.target.value); // Debug log
    await fetchProducts({ status: e.target.value, page: 1 });
    // window.history.pushState({}, '', buildUrl({ status: e.target.value, page: 1 }));
  });

  document.getElementById('category-filter').addEventListener('change', async e => {
    STATE.categoryFilter = e.target.value;
    STATE.page = 1;
    console.log('Category filter changed:', e.target.value); // Debug log
    await fetchProducts({ categoryFilter: e.target.value, page: 1 });
    // window.history.pushState({}, '', buildUrl({ categoryFilter: e.target.value, page: 1 }));
  });

  document.getElementById('brand-filter').addEventListener('change', async e => {
    STATE.brandFilter = e.target.value;
    STATE.page = 1;
    console.log('Brand filter changed:', e.target.value); // Debug log
    await fetchProducts({ brandFilter: e.target.value, page: 1 });
    // window.history.pushState({}, '', buildUrl({ brandFilter: e.target.value, page: 1 }));
  });

  document.getElementById('sort-field').addEventListener('change', async e => {
    STATE.sortField = e.target.value;
    STATE.page = 1;
    console.log('Sort field changed:', e.target.value); // Debug log
    await fetchProducts({ sortField: e.target.value, page: 1 });
    // window.history.pushState({}, '', buildUrl({ sortField: e.target.value, page: 1 }));
  });

  document.getElementById('sort-order').addEventListener('click', async () => {
    STATE.sortOrder = STATE.sortOrder === 'asc' ? 'desc' : 'asc';
    STATE.page = 1;
    console.log('Sort order changed:', STATE.sortOrder); // Debug log
    await fetchProducts({ sortOrder: STATE.sortOrder, page: 1 });
    // window.history.pushState({}, '', buildUrl({ sortOrder: STATE.sortOrder, page: 1 }));
  });

  document.getElementById('search-form').addEventListener('submit', async e => {
    e.preventDefault();
    STATE.search = document.getElementById('search-input').value.trim();
    STATE.page = 1;
    console.log('Search submitted:', STATE.search); // Debug log
    await fetchProducts({ search: STATE.search, page: 1 });
    // window.history.pushState({}, '', buildUrl({ search: STATE.search, page: 1 }));
  });

  document.getElementById('reset-filters').addEventListener('click', resetFilters);

  document.getElementById('page-input').addEventListener('change', e => {
    goToPage(parseInt(e.target.value));
  });

  document.getElementById('prev-btn').addEventListener('click', () => goToPage(STATE.page - 1));
  document.getElementById('next-btn').addEventListener('click', () => goToPage(STATE.page + 1));

  document.addEventListener('keydown', e => {
    if (e.key === 'Escape') {
      if (document.getElementById('confirm-modal').classList.contains('active')) {
        closeConfirmModal();
      }
      if (document.getElementById('variant-modal').classList.contains('active')) {
        closeVariantModal();
      }
    }
  });

  document.getElementById('confirm-modal').addEventListener('click', e => {
    if (e.target === document.getElementById('confirm-modal')) closeConfirmModal();
  });

  document.getElementById('variant-modal').addEventListener('click', e => {
    if (e.target === document.getElementById('variant-modal')) closeVariantModal();
  });

  window.addEventListener('popstate', async () => {
    if (!STATE.isLoading) {
      const params = new URLSearchParams(window.location.search);
      STATE.page = parseInt(params.get('page')) || 1;
      STATE.status = params.get('status') || 'all';
      STATE.categoryFilter = params.get('categoryFilter') || 'all';
      STATE.brandFilter = params.get('brandFilter') || 'all';
      STATE.sortField = params.get('sortField') || 'createdAt';
      STATE.sortOrder = params.get('sortOrder') || 'desc';
      STATE.search = params.get('search') || '';

      document.getElementById('search-input').value = STATE.search;
      document.getElementById('status-filter').value = STATE.status;
      document.getElementById('category-filter').value = STATE.categoryFilter;
      document.getElementById('brand-filter').value = STATE.brandFilter;
      document.getElementById('sort-field').value = STATE.sortField;
      document.getElementById('sort-order').innerHTML = `<i class="icon-${STATE.sortOrder === 'asc' ? 'arrow-up' : 'arrow-down'}"></i>`;

      console.log('Popstate event:', { ...STATE }); // Debug log
      await fetchProducts();
    }
  });
});

// Close variant modal
function closeVariantModal() {
  document.getElementById('variant-modal').classList.remove('active');
  document.body.style.overflow = '';
}
</script>
</body>
</html>