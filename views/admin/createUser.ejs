<link rel="stylesheet" href="/css/modal.css">

<div class="container-fluid">
  <div class="title-wrapper pt-30 mb-20">
    <div class="row align-items-center">
      <div class="col-md-6">
        <div class="title">
          <h2>Create New User</h2>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-lg-12">
      <div class="card-style mb-30">
        <form id="create-user-form">
          <div class="row">

            <div class="col-md-6">
              <div class="input-style-1">
                <label for="name" class="form-label text-sm">
                  Full Name <span class="text-danger">*</span>
                </label>
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  class="form-control form-control-sm" 
                  required
                  placeholder="Enter full name"
                >
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="input-style-1">
                <label for="email" class="form-label text-sm">
                  Email Address <span class="text-danger">*</span>
                </label>
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  class="form-control form-control-sm" 
                  required
                  placeholder="Enter email address"
                >
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="input-style-1">
                <label for="phone" class="form-label text-sm">Phone Number</label>
                <input 
                  type="tel" 
                  id="phone" 
                  name="phone" 
                  class="form-control form-control-sm"
                  placeholder="Enter phone number"
                >
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="input-style-1">
                <label for="dateOfBirth" class="form-label text-sm">Date of Birth</label>
                <input 
                  type="date" 
                  id="dateOfBirth" 
                  name="dateOfBirth" 
                  class="form-control form-control-sm"
                >
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <!-- Password Field -->
            <div class="col-md-6">
              <div class="input-style-1">
                <label for="password" class="form-label text-sm">
                  Password <span class="text-danger">*</span>
                </label>
                <input 
                  type="password" 
                  id="password" 
                  name="password" 
                  class="form-control form-control-sm"
                  required
                  placeholder="Enter password"
                >
                <div class="invalid-feedback"></div>
                <small class="text-xs text-muted">
                  Password must contain at least 8 characters with uppercase, lowercase, number and special character
                </small>
              </div>
            </div>

            <div class="col-md-6">
              <div class="input-style-1">
                <label for="confirmPassword" class="form-label text-sm">
                  Confirm Password <span class="text-danger">*</span>
                </label>
                <input 
                  type="password" 
                  id="confirmPassword" 
                  name="confirmPassword" 
                  class="form-control form-control-sm"
                  required
                  placeholder="Confirm password"
                >
                <div class="invalid-feedback"></div>
              </div>
            </div>
          </div>
          
          <div class="row mt-3">
            <div class="col-12">
              <h5 class="text-sm mb-2">User Status & Permissions</h5>
              <div class="card-style bg-light px-5 mb-30">
                <div class="row">
                  <div class="col-md-4">
                    <div class="form-check">
                      <input 
                        class="form-check-input" 
                        type="checkbox" 
                        id="isVerified" 
                        name="isVerified" 
                        value="true"
                      >
                      <label class="form-check-label text-sm" for="isVerified">
                        <i class="lni lni-checkmark-circle text-success mr-1"></i>
                        Email Verified
                      </label>
                    </div>
                  </div>
                  
                  <div class="col-md-4">
                    <div class="form-check">
                      <input 
                        class="form-check-input" 
                        type="checkbox" 
                        id="isBlocked" 
                        name="isBlocked" 
                        value="true"
                      >
                      <label class="form-check-label text-sm" for="isBlocked">
                        <i class="lni lni-ban text-danger mr-1"></i>
                        Account Blocked
                      </label>
                    </div>
                  </div>
                  
                  <div class="col-md-4">
                    <div class="form-check">
                      <input 
                        class="form-check-input" 
                        type="checkbox" 
                        id="isListed" 
                        name="isListed" 
                        value="true"
                        checked
                      >
                      <label class="form-check-label text-sm" for="isListed">
                        <i class="lni lni-eye text-primary mr-1"></i>
                        Account Listed
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="d-flex gap-2 mt-4">
            <button type="submit" class="main-btn primary-btn btn-sm" id="submit-btn">
              <i class="lni lni-plus mr-1"></i> 
              <span id="btn-text">Create User</span>
            </button>
            <a href="/admin/users/all" class="main-btn light-btn btn-sm">
              <i class="lni lni-arrow-left mr-1"></i> Back to Users
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Custom Modal Overlay -->
<div id="modal-overlay" class="modal-overlay">
  <!-- Success Modal -->
  <div id="success-modal" class="custom-modal success-modal">
    <div class="modal-header">
      <h3><i class="lni lni-checkmark-circle"></i> Success!</h3>
    </div>
    <div class="modal-body">
      <div class="modal-icon">
        <i class="lni lni-checkmark-circle"></i>
      </div>
      <p id="success-message">User created successfully!</p>
    </div>
    <div class="modal-footer">
      <button class="modal-btn success-btn" id="success-ok-btn">
        <i class="lni lni-checkmark"></i> OK
      </button>
    </div>
  </div>

  <!-- Error Modal -->
  <div id="error-modal" class="custom-modal error-modal">
    <div class="modal-header">
      <h3><i class="lni lni-warning"></i> Error!</h3>
    </div>
    <div class="modal-body">
      <div class="modal-icon">
        <i class="lni lni-warning"></i>
      </div>
      <p id="error-message">An error occurred while creating the user.</p>
    </div>
    <div class="modal-footer">
      <button class="modal-btn error-btn" id="error-ok-btn">
        <i class="lni lni-close"></i> Close
      </button>
    </div>
  </div>
</div>

<style>
  /* Form Styling */
  .form-control-sm {
    height: 36px;
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }
  
  .form-control-sm:focus {
    border-color: #365CF5;
    box-shadow: 0 0 0 0.2rem rgba(54, 92, 245, 0.25);
  }
  
  /* Text Sizes */
  .text-xs { font-size: 0.75rem; }
  .text-sm { font-size: 0.875rem; }
  
  /* Input Styling */
  .input-style-1 {
    margin-bottom: 1rem;
  }
  
  .input-style-1 label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #333;
  }
  
  /* Form Check Styling */
  .form-check {
    padding: 0.5rem 0;
  }
  
  .form-check-label {
    margin-left: 0.25rem;
    cursor: pointer;
  }
  
  .form-check-input:checked {
    background-color: #365CF5;
    border-color: #365CF5;
  }
  
  /* Validation Styling */
  .invalid-feedback {
    display: none;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.75rem;
    color: #dc3545;
  }
  
  .is-invalid {
    border-color: #dc3545 !important;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
  }
  
  .is-invalid ~ .invalid-feedback {
    display: block;
  }
  
  /* Loading State */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }
  
  /* Button Styling */
  .main-btn {
    transition: all 0.3s ease;
  }
  
  .main-btn:hover {
    transform: translateY(-1px);
  }
  
  /* Custom Modal Styling */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  
  .modal-overlay.show {
    display: flex;
  }
  
  .custom-modal {
    background: white;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    transform: scale(0.7);
    opacity: 0;
    transition: all 0.3s ease;
  }
  
  .modal-overlay.show .custom-modal {
    transform: scale(1);
    opacity: 1;
  }
  
  .modal-header {
    padding: 20px;
    text-align: center;
    color: white;
  }
  
  .success-modal .modal-header {
    background: linear-gradient(135deg, #28a745, #20c997);
  }
  
  .error-modal .modal-header {
    background: linear-gradient(135deg, #dc3545, #e74c3c);
  }
  
  .modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  .modal-header i {
    margin-right: 8px;
    font-size: 1.5rem;
  }
  
  .modal-body {
    padding: 30px 20px;
    text-align: center;
  }
  
  .modal-icon {
    margin-bottom: 20px;
  }
  
  .modal-icon i {
    font-size: 4rem;
  }
  
  .success-modal .modal-icon i {
    color: #28a745;
  }
  
  .error-modal .modal-icon i {
    color: #dc3545;
  }
  
  .modal-body p {
    margin: 0;
    font-size: 1rem;
    color: #333;
    line-height: 1.5;
  }
  
  .modal-footer {
    padding: 20px;
    text-align: center;
    border-top: 1px solid #eee;
  }
  
  .modal-btn {
    padding: 10px 30px;
    border: none;
    border-radius: 5px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    color: white;
  }
  
  .success-btn {
    background: linear-gradient(135deg, #28a745, #20c997);
  }
  
  .success-btn:hover {
    background: linear-gradient(135deg, #218838, #1e7e34);
    transform: translateY(-1px);
  }
  
  .error-btn {
    background: linear-gradient(135deg, #dc3545, #e74c3c);
  }
  
  .error-btn:hover {
    background: linear-gradient(135deg, #c82333, #bd2130);
    transform: translateY(-1px);
  }
  
  .modal-btn i {
    margin-right: 5px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .d-flex.gap-2 {
      flex-direction: column;
      gap: 0.5rem !important;
    }
    
    .main-btn {
      width: 100%;
      text-align: center;
    }
    
    .custom-modal {
      width: 95%;
      margin: 10px;
    }
    
    .modal-body {
      padding: 20px 15px;
    }
    
    .modal-icon i {
      font-size: 3rem;
    }
  }
</style>


<script>
const form = document.getElementById('create-user-form');
const submitBtn = document.getElementById('submit-btn');
const btnText = document.getElementById('btn-text');
const modalOverlay = document.getElementById('modal-overlay');
const successModal = document.getElementById('success-modal');
const errorModal = document.getElementById('error-modal');
const successMessage = document.getElementById('success-message');
const errorMessage = document.getElementById('error-message');
const successOkBtn = document.getElementById('success-ok-btn');
const errorOkBtn = document.getElementById('error-ok-btn');


function showModal(type, message) {
    if (type === 'success') {
        successMessage.textContent = message;
        successModal.style.display = 'block';
        errorModal.style.display = 'none';
    } else {
        errorMessage.textContent = message;
        errorModal.style.display = 'block';
        successModal.style.display = 'none';
    }
    
    modalOverlay.classList.add('show');
    document.body.style.overflow = 'hidden'; 
}

function hideModal() {
    modalOverlay.classList.remove('show');
    document.body.style.overflow = ''; // Restore scrolling
    
    setTimeout(() => {
        successModal.style.display = 'none';
        errorModal.style.display = 'none';
    }, 300);
}

document.addEventListener('DOMContentLoaded', function() {
    
form.addEventListener('submit', async function(e) {
    e.preventDefault();

    try {
        clearValidationErrors();

        if (!validateForm()) {
            console.log("Form validation failed");
            return false;
        }

        setLoadingState(true);

        const formData = new FormData(form);
        
        const userData = {
            name: formData.get('name'),
            email: formData.get('email'),
            isVerified: formData.has('isVerified'),
            isBlocked: formData.has('isBlocked'),
            isListed: formData.has('isListed')
        };
        
        const phone = formData.get('phone');
        if (phone) {
            userData.phone = phone;
        }
        
        const password = formData.get('password');
        if (password) {
            userData.password = password;
        }
        
        const dateOfBirth = formData.get('dateOfBirth');
        if (dateOfBirth) {
            userData.dateOfBirth = dateOfBirth;
        }

        const response = await fetch('/admin/users/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData)
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            showModal('success', result.message);
        } else {
            showModal('error', result.message || 'An error occurred');
        }

    } catch (error) {
        showModal('error', 'Network error. Please try again.');
    } finally {
        setLoadingState(false);
    }
});
    
    // Modal button handlers
    successOkBtn.addEventListener('click', function() {
        hideModal();
        // Redirect to users list page after modal is hidden
        setTimeout(() => {
            window.location.href = '/admin/users/all';
        }, 300);
    });
    
    errorOkBtn.addEventListener('click', function() {
        hideModal();
    });
    
    // Close modal when clicking overlay
    modalOverlay.addEventListener('click', function(e) {
        if (e.target === modalOverlay) {
            hideModal();
        }
    });
    
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modalOverlay.classList.contains('show')) {
            hideModal();
        }
    });
    
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('blur', () => validateInput(input));
        input.addEventListener('input', () => {
            if (input.classList.contains('is-invalid')) {
                validateInput(input);
            }
        });
    });
    

    function validateForm() {
        let isValid = true;
        const inputs = form.querySelectorAll('input');
        
        inputs.forEach(input => {
            if (!validateInput(input)) {
                isValid = false;
            }
        });
        
        return isValid;
    }
    

    function validateInput(input) {
        const value = input.value.trim();
        let isValid = true;
        let errorMessage = '';
        
        switch (input.name) {
            case 'name':
                if (!value) {
                    isValid = false;
                    errorMessage = 'Full name is required';
                } else if (!checkNameValid(value)) {
                    isValid = false;
                    errorMessage = 'Name must be 2-50 characters and contain only letters, spaces, hyphens, and apostrophes';
                }
                break;
                
            case 'email':
                if (!value) {
                    isValid = false;
                    errorMessage = 'Email address is required';
                } else if (!checkEmailValid(value)) {
                    isValid = false;
                    errorMessage = 'Please enter a valid email address';
                }
                break;
                
            case 'phone':
                if (value && !checkPhoneNumberValid(value)) {
                    isValid = false;
                    errorMessage = 'Phone number must be 7-15 digits';
                }
                break;
                
            case 'password':
                if (!value) {
                    isValid = false;
                    errorMessage = 'Password is required';
                } else if (!checkPasswordValid(value)) {
                    isValid = false;
                    errorMessage = 'Password must contain at least 8 characters with uppercase, lowercase, number and special character';
                }
                break;
                
            case 'confirmPassword':
                const password = form.querySelector('[name="password"]').value;
                if (!value) {
                    isValid = false;
                    errorMessage = 'Please confirm your password';
                } else if (!checkPasswordMatch(password, value)) {
                    isValid = false;
                    errorMessage = 'Passwords do not match';
                }
                break;
                
            case 'dateOfBirth':
                if (value) {
                    const birthDate = new Date(value);
                    const today = new Date();
                    const age = today.getFullYear() - birthDate.getFullYear();
                    if (age < 13 || age > 120) {
                        isValid = false;
                        errorMessage = 'Please enter a valid date of birth';
                    }
                }
                break;
        }
        
        showValidationFeedback(input, isValid, errorMessage);
        
        return isValid;
    }
    

    function showValidationFeedback(input, isValid, errorMessage) {
        const feedback = input.parentNode.querySelector('.invalid-feedback');
        
        if (isValid) {
            input.classList.remove('is-invalid');
            if (feedback) feedback.textContent = '';
        } else {
            input.classList.add('is-invalid');
            if (feedback) feedback.textContent = errorMessage;
        }
    }
    

    function clearValidationErrors() {
        const invalidInputs = form.querySelectorAll('.is-invalid');
        invalidInputs.forEach(input => {
            input.classList.remove('is-invalid');
            const feedback = input.parentNode.querySelector('.invalid-feedback');
            if (feedback) feedback.textContent = '';
        });
    }
    

    function setLoadingState(loading) {
        if (loading) {
            submitBtn.disabled = true;
            btnText.innerHTML = '<i class="lni lni-spinner-arrow mr-1"></i> Creating...';
            form.classList.add('loading');
        } else {
            submitBtn.disabled = false;
            btnText.innerHTML = 'Create User';
            form.classList.remove('loading');
        }
    }
});
</script>
