<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Edit Product</title>
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
  >
  <style>
    /* Modern Product Form Styles */
    :root {
      --primary: #2563eb;
      --primary-hover: #1d4ed8;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
      --white: #ffffff;
      --radius: 8px;
      --radius-lg: 12px;
      --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
      --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
      --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    }
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: var(--gray-50); color: var(--gray-900); line-height: 1.5; }

    .product-form-section { min-height: 100vh; padding: 1rem; }
    .container-fluid { max-width: 1000px; margin: 0 auto; }
    .content-wrapper { display: flex; flex-direction: column; gap: 1.5rem; }
    .page-card { background: var(--white); border-radius: var(--radius-lg); box-shadow: var(--shadow); overflow: hidden; }

    .page-header { display: flex; align-items: center; justify-content: space-between; padding: 1.5rem 2rem; border-bottom: 1px solid var(--gray-200); background: var(--white); }
    .header-content { display: flex; align-items: center; gap: 1.5rem; }
    .page-title { font-size: 1.5rem; font-weight: 600; color: var(--gray-900); }
    .btn { display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; border: none; border-radius: var(--radius); font-size: 0.875rem; font-weight: 500; cursor: pointer; transition: all 0.2s; text-decoration: none; white-space: nowrap; }
    .btn:disabled { opacity: 0.5; cursor: not-allowed; }
    .btn-primary { background: var(--primary); color: var(--white); }
    .btn-primary:hover:not(:disabled) { background: var(--primary-hover); }
    .btn-ghost { background: transparent; color: var(--gray-600); border: 1px solid var(--gray-200); }
    .btn-ghost:hover:not(:disabled) { background: var(--gray-50); color: var(--gray-900); }

    .message-container { padding: 0 2rem; }
    .alert { padding: 0.75rem 1rem; border-radius: var(--radius); font-size: 0.875rem; display: none; margin: 1rem 0; }
    .alert.show { display: block; }
    .alert-error { background: #fef2f2; color: #991b1b; border: 1px solid #fecaca; }
    .alert-success { background: #f0fdf4; color: #166534; border: 1px solid #bbf7d0; }

    .product-form { padding: 2rem; }
    .form-grid { display: flex; flex-direction: column; gap: 2rem; margin-bottom: 2rem; }
    .form-section { display: flex; flex-direction: column; gap: 1rem; }
    .section-title { font-size: 1rem; font-weight: 600; color: var(--gray-900); margin-bottom: 0.5rem; }
    .form-group { display: flex; flex-direction: column; gap: 0.5rem; }
    .form-row { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }
    .form-label { font-size: 0.875rem; font-weight: 500; color: var(--gray-700); }
    .required { color: var(--danger); }
    .form-input, .form-textarea, .form-select { padding: 0.75rem 1rem; border: 1px solid var(--gray-300); border-radius: var(--radius); font-size: 0.875rem; transition: all 0.2s; }
    .form-input:focus, .form-textarea:focus, .form-select:focus { outline: none; border-color: var(--primary); box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1); }
    .form-input.error, .form-textarea.error, .form-select.error { border-color: var(--danger); }
    .form-error { font-size: 0.75rem; color: var(--danger); display: none; }
    .form-error.show { display: block; }

    .input-group { display: flex; border: 1px solid var(--gray-300); border-radius: var(--radius); overflow: hidden; }
    .input-prefix { padding: 0.75rem 1rem; background: var(--gray-50); color: var(--gray-500); font-size: 0.875rem; border-right: 1px solid var(--gray-300); }
    .input-group .form-input { border: none; border-radius: 0; }

    .checkbox-group { display: flex; align-items: center; gap: 0.75rem; }
    .checkbox-label { display: flex; align-items: center; gap: 0.5rem; cursor: pointer; user-select: none; }
    .checkbox-label input[type="checkbox"] { display: none; }
    .checkbox-custom { width: 1rem; height: 1rem; border: 1px solid var(--gray-300); border-radius: 0.25rem; position: relative; transition: all 0.2s; }
    .checkbox-label input:checked + .checkbox-custom { background: var(--primary); border-color: var(--primary); }
    .checkbox-label input:checked + .checkbox-custom:after { content: '✓'; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: var(--white); font-size: 0.75rem; font-weight: bold; }
    .checkbox-text { font-size: 0.875rem; color: var(--gray-700); }

    .image-upload-container { display: flex; flex-direction: column; gap: 1rem; }
    .image-upload-area { border: 2px dashed var(--gray-300); border-radius: var(--radius-lg); padding: 2rem; text-align: center; cursor: pointer; transition: all 0.2s; }
    .image-upload-area:hover { border-color: var(--primary); background: var(--gray-50); }
    .upload-placeholder { display: flex; flex-direction: column; align-items: center; gap: 0.5rem; }
    .upload-placeholder i { font-size: 2rem; color: var(--gray-400); }
    .upload-placeholder p { font-size: 0.875rem; font-weight: 500; color: var(--gray-700); }
    .upload-placeholder span { font-size: 0.75rem; color: var(--gray-500); }

    .image-preview-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 1rem; }
    .image-preview { position: relative; aspect-ratio: 1; border-radius: var(--radius); overflow: hidden; background: var(--gray-100); }
    .image-preview img { width: 100%; height: 100%; object-fit: cover; }
    .image-remove { position: absolute; top: 0.25rem; right: 0.25rem; width: 1.5rem; height: 1.5rem; background: var(--danger); color: var(--white); border: none; border-radius: 50%; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 0.75rem; }

    .form-actions { display: flex; gap: 1rem; justify-content: flex-end; padding-top: 2rem; border-top: 1px solid var(--gray-200); }
    .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000; opacity: 0; visibility: hidden; transition: all 0.3s ease; }
    .modal-overlay.active { opacity: 1; visibility: visible; }
    .modal-container { background: var(--white); border-radius: var(--radius-lg); box-shadow: var(--shadow-lg); max-width: 600px; width: 90%; max-height: 90vh; overflow: hidden; transform: scale(0.95); transition: transform 0.3s ease; }
    .modal-overlay.active .modal-container { transform: scale(1); }

    .modal-header { display: flex; align-items: center; justify-content: space-between; padding: 1.5rem 2rem; border-bottom: 1px solid var(--gray-200); }
    .modal-header h3 { font-size: 1.125rem; font-weight: 600; color: var(--gray-900); }
    .modal-close { padding: 0.5rem; background: none; border: none; color: var(--gray-400); cursor: pointer; border-radius: var(--radius); transition: all 0.2s; }
    .modal-close:hover { background: var(--gray-100); color: var(--gray-600); }
    .modal-body { padding: 2rem; max-height: 60vh; overflow-y: auto; }
    .modal-footer { display: flex; gap: 1rem; justify-content: flex-end; padding: 1.5rem 2rem; border-top: 1px solid var(--gray-200); background: var(--gray-50); }

    .crop-container { max-width: 100%; max-height: 400px; overflow: hidden; }
    .crop-container img { max-width: 100%; height: auto; }

    .loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.9); display: flex; align-items: center; justify-content: center; z-index: 2000; opacity: 0; visibility: hidden; transition: all 0.3s ease; }
    .loading-overlay.active { opacity: 1; visibility: visible; }
    .loading-spinner .spinner { width: 2rem; height: 2rem; border: 2px solid var(--gray-200); border-top: 2px solid var(--primary); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    .btn-spinner { width: 1rem; height: 1rem; border: 1px solid transparent; border-top: 1px solid currentColor; border-radius: 50%; animation: spin 1s linear infinite; display: none; }
    .btn-spinner.active { display: block; }

    @media (max-width: 768px) {
      .form-row { grid-template-columns: 1fr; }
      .form-actions { flex-direction: column; }
      .image-preview-container { grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); }
    }
  </style>
</head>
<body>
  <section class="product-form-section">
    <div class="container-fluid">
      <!-- Loading overlay -->
      <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner">
          <div class="spinner"></div>
          <p>Loading...</p>
        </div>
      </div>

      <div class="content-wrapper">
        <div class="page-card">
          <!-- Header -->
          <div class="page-header">
            <div class="header-content">
              <h1 class="page-title">Edit Product</h1>
            </div>
            <a href="/admin/products/all" class="btn btn-ghost">
              ← <span>Back to Products</span>
            </a>
          </div>

          <!-- Flash messages -->
          <div class="message-container">
            <% if (messages?.error?.length) { %>
              <div class="alert alert-error show"><%= messages.error[0] %></div>
            <% } %>
            <% if (messages?.success?.length) { %>
              <div class="alert alert-success show"><%= messages.success[0] %></div>
            <% } %>
            <div class="alert alert-error" id="dynamic-error-msg"></div>
            <div class="alert alert-success" id="dynamic-success-msg"></div>
          </div>

          <!-- Product Form -->
          <form id="product-form" class="product-form">
            <div class="form-grid">
              <!-- Basic Info -->
              <div class="form-section">
                <h4 class="section-title">Basic Information</h4>
                <div class="form-group">
                  <label class="form-label">Name <span class="required">*</span></label>
                  <input type="text" id="product-name" name="name" class="form-input"
                         value="<%= product.name %>" required>
                  <div class="form-error" id="name-error"></div>
                </div>
                <div class="form-group">
                  <label class="form-label">Description</label>
                  <textarea id="product-description" name="description"
                            class="form-textarea"><%= product.description %></textarea>
                  <div class="form-error" id="description-error"></div>
                </div>
                <div class="form-row">
                  <div class="form-group">
                    <label class="form-label">Category <%= product.category %> <span class="required">*</span></label>
                    <select id="product-category" name="category" class="form-select" required>
                      <option value="">Select category</option>
                      <% categories.forEach(cat => { %>
                        <option value="<%= cat._id %>"
                          <%= product.category?.toString() === cat._id.toString() ? 'selected' : '' %>>
                          <%= cat.name %>
                        </option>
                      <% }) %>
                    </select>
                    <div class="form-error" id="category-error"></div>
                  </div>
                  <div class="form-group">
                    <label class="form-label">Brand</label>
                    <select id="product-brand" name="brand" class="form-select">
                      <option value="">Select brand</option>
                      <% brands.forEach(br => { %>
                        <option value="<%= br._id %>"
                          <%= product.brand?.toString() === br._id.toString() ? 'selected' : '' %>>
                          <%= br.name %>
                        </option>
                      <% }) %>
                    </select>
                    <div class="form-error" id="brand-error"></div>
                  </div>
                </div>
              </div>

              <!-- Pricing & Stock -->
              <div class="form-section">
                <h4 class="section-title">Pricing & Stock</h4>
                <div class="form-row">
                  <div class="form-group">
                    <label class="form-label">Regular Price <span class="required">*</span></label>
                    <div class="input-group">
                      <span class="input-prefix">$</span>
                      <input type="number" id="product-regular-price" name="regularPrice"
                             class="form-input" step="0.01" min="0"
                             value="<%= product.regularPrice %>" required>
                    </div>
                    <div class="form-error" id="regularPrice-error"></div>
                  </div>
                  <div class="form-group">
                    <label class="form-label">Sale Price</label>
                    <div class="input-group">
                      <span class="input-prefix">$</span>
                      <input type="number" id="product-sale-price" name="salePrice"
                             class="form-input" step="0.01" min="0"
                             value="<%= product.salePrice %>">
                    </div>
                    <div class="form-error" id="salePrice-error"></div>
                  </div>
                </div>
                <div class="form-group">
                  <label class="form-label">Stock Quantity</label>
                  <input type="number" id="product-stock" name="stock" class="form-input"
                         min="0" value="<%= product.stock %>">
                  <div class="form-error" id="stock-error"></div>
                </div>
              </div>

              <!-- Images -->
              <div class="form-section">
                <h4 class="section-title">Product Images <span class="required">*</span></h4>
                <div class="image-upload-container">
                  <div class="image-upload-area" id="image-upload-area">
                    <div class="upload-placeholder">
                      <i>📤</i>
                      <p>Click or drag to upload</p>
                    </div>
                    <input type="file" id="image-input" accept="image/*" multiple style="display:none">
                  </div>
                  <div class="image-preview-container" id="image-preview-container"></div>
                  <div class="form-error" id="images-error"></div>
                </div>
              </div>

              <!-- Variants -->
              <div class="form-section">
                <h4 class="section-title">Variants <span class="required">*</span></h4>
                <button type="button" id="add-variant-btn" class="btn btn-primary">
                  + Add Variant
                </button>
                <div class="form-error" id="variants-error"></div>
                <div id="variants-container">
                  <% product.variants.forEach((v, idx) => { %>
                    <div class="variant-block" id="variant-<%=idx%>">
                      <button type="button" class="btn btn-ghost"
                              style="float:right"
                              onclick="removeVariant(`<%=idx%>`)">
                        × Remove
                      </button>
                      <div class="form-row">
                        <div class="form-group">
                          <label class="form-label">Size <span class="required">*</span></label>
                          <select name="variants[<%=idx%>][size]" class="form-select" required>
                            <option value="">Select size</option>
                            <% ['xs','sm','md','lg','xl','xxl'].forEach(s => { %>
                              <option value="<%=s%>" <%=v.size===s?'selected':''%>><%=s.toUpperCase()%></option>
                            <% }) %>
                          </select>
                        </div>
                        <div class="form-group">
                          <label class="form-label">Color <span class="required">*</span></label>
                          <input type="text" name="variants[<%=idx%>][color]" class="form-input"
                                 value="<%=v.color%>" required>
                        </div>
                      </div>
                      <div class="form-row">
                        <div class="form-group">
                          <label class="form-label">Price <span class="required">*</span></label>
                          <input type="number" name="variants[<%=idx%>][price]" class="form-input"
                                 step="0.01" min="0" value="<%=v.price%>" required>
                        </div>
                        <div class="form-group">
                          <label class="form-label">Sale Price</label>
                          <input type="number" name="variants[<%=idx%>][salePrice]" class="form-input"
                                 step="0.01" min="0" value="<%=v.salePrice%>">
                        </div>
                      </div>
                      <div class="form-row">
                        <div class="form-group">
                          <label class="form-label">Stock <span class="required">*</span></label>
                          <input type="number" name="variants[<%=idx%>][stock]" class="form-input"
                                 min="0" value="<%=v.stock%>" required>
                        </div>
                        <div class="form-group">
                          <label class="form-label">Images <span class="required">*</span></label>
                          <div class="image-upload-area" id="variant-upload-<%=idx%>">
                            Click or drag
                          </div>
                          <div class="image-preview-container" id="variant-preview-<%=idx%>">
                            <% v.images.forEach((u,i)=>{ %>
                              <div class="image-preview">
                                <img src="<%=u%>">
                                <button type="button" class="image-remove"
                                        onclick="removeVariantImage(`<%=idx%>`,`<%=i%>`)">×</button>
                              </div>
                            <% }) %>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% }) %>
                </div>
              </div>

              <!-- Settings -->
              <div class="form-section">
                <div class="checkbox-group">
                  <label class="checkbox-label">
                    <input type="checkbox" id="product-active" name="isActive"
                           <%=product.isActive?'checked':''%>>
                    <span class="checkbox-custom"></span>
                    <span class="checkbox-text">Active</span>
                  </label>
                </div>
                <div class="checkbox-group">
                  <label class="checkbox-label">
                    <input type="checkbox" id="product-featured" name="isFeatured"
                           <%=product.isFeatured?'checked':''%>>
                    <span class="checkbox-custom"></span>
                    <span class="checkbox-text">Featured</span>
                  </label>
                </div>
              </div>
            </div>

            <div class="form-actions">
              <a href="/admin/products/all" class="btn btn-ghost">Cancel</a>
              <button type="submit" class="btn btn-primary" id="product-submit-btn">
                <span class="btn-spinner" id="product-spinner"></span>
                <span id="product-submit-text">Save Changes</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- Image Crop Modal -->
  <div class="modal-overlay" id="crop-modal">
    <div class="modal-container modal-crop">
      <div class="modal-header">
        <h3>Crop Image</h3>
        <button class="modal-close" onclick="closeCropModal()">×</button>
      </div>
      <div class="modal-body">
        <div class="crop-container">
          <img id="crop-image" src="" alt="Crop">
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-ghost" onclick="closeCropModal()">Cancel</button>
        <button class="btn btn-primary" onclick="applyCrop()">Apply Crop</button>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    const BASE_URL = window.location.origin;
    const MIN_IMAGES = 3;
    const PRODUCT_ID = '<%= product._id %>';


    // prettier-ignore
    const uploadedJSONimages = <%- JSON.stringify(product.images) %>;

    const STATE = {
      uploadedImages: uploadedJSONimages,
      variants: {},        
      cropper: null,
      currentCropFile: null,
      currentTarget: null, 
      isLoading: false
    };


    <% product.variants.forEach((v, idx) => { %>
      STATE.variants[<%=idx%>] = { images: <%- JSON.stringify(v.images) %> };
    <% }) %>
    let variantCount = <%= product.variants.length %>;




    function showLoading() {
      STATE.isLoading = true;
      document.getElementById('loading-overlay').classList.add('active');
    }
    function hideLoading() {
      STATE.isLoading = false;
      document.getElementById('loading-overlay').classList.remove('active');
    }
    function clearFormErrors() {
      document.querySelectorAll('.form-error').forEach(el => {
        el.textContent = '';
        el.classList.remove('show');
      });
      document.querySelectorAll('.form-input, .form-select, .form-textarea')
        .forEach(i => i.classList.remove('error'));
    }
    function showFormError(id, msg) {
      const el = document.getElementById(id);
      if (!el) return;
      el.textContent = msg;
      el.classList.add('show');
    }




    // ----- Image Upload + Crop -----
    function initializeImageUpload() {
      ['main', ...Object.keys(STATE.variants)].forEach(target => {
        const area = target==='main'
          ? document.getElementById('image-upload-area')
          : document.getElementById(`variant-upload-${target}`);
        const handle = files => handleFiles(files, target);
        area.addEventListener('click', () => openFileDialog(target));
        area.addEventListener('dragover', e => {
          e.preventDefault();
          area.style.borderColor = 'var(--primary)';
        });
        area.addEventListener('dragleave', e => {
          e.preventDefault();
          area.style.borderColor = 'var(--gray-300)';
        });
        area.addEventListener('drop', e => {
          e.preventDefault();
          area.style.borderColor = 'var(--gray-300)';
          handle([...e.dataTransfer.files]);
        });
      });
    }
    function openFileDialog(target) {
      const inp = document.createElement('input');
      inp.type = 'file';
      inp.accept = 'image/*';
      inp.multiple = true;
      inp.style.display = 'none';
      document.body.appendChild(inp);
      inp.onchange = () => {
        handleFiles([...inp.files], target);
        document.body.removeChild(inp);
      };
      inp.click();
    }
    function handleFiles(files, target) {
      files.filter(f => f.type.startsWith('image/'))
        .forEach(f => {
          const reader = new FileReader();
          reader.onload = e => openCropModal(e.target.result, f, target);
          reader.readAsDataURL(f);
        });
    }
    function openCropModal(src, file, target) {
      STATE.currentCropFile = file;
      STATE.currentTarget = target;
      const img = document.getElementById('crop-image');
      img.src = src;
      document.getElementById('crop-modal').classList.add('active');
      if (STATE.cropper) STATE.cropper.destroy();
      STATE.cropper = new Cropper(img, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.8,
      });
    }
    function closeCropModal() {
      document.getElementById('crop-modal').classList.remove('active');
      if (STATE.cropper) {
        STATE.cropper.destroy();
        STATE.cropper = null;
      }
      STATE.currentCropFile = null;
      STATE.currentTarget = null;
    }
    async function applyCrop() {
      if (!STATE.cropper) return;
      const canvas = STATE.cropper.getCroppedCanvas({ width:800, height:800 });
      canvas.toBlob(async blob => {
        const fd = new FormData();
        fd.append('image', blob, `img-${Date.now()}.jpg`);
        showLoading();
        const res = await fetch(`${BASE_URL}/admin/products/upload-image`, {
          method: 'POST', body: fd
        });
        const j = await res.json();
        hideLoading();
        if (!j.success) {
          showFormError('dynamic-error-msg', j.message||'Upload failed');
          return closeCropModal();
        }
        const url = j.imageUrl;
        if (STATE.currentTarget==='main') {
          STATE.uploadedImages.push(url);
          renderMainPreviews();
        } else {
          STATE.variants[STATE.currentTarget].images.push(url);
          renderVariantPreviews(STATE.currentTarget);
        }
        closeCropModal();
      }, 'image/jpeg', 0.9);
    }
    function renderMainPreviews() {
      const c = document.getElementById('image-preview-container');
      c.innerHTML = '';
      STATE.uploadedImages.forEach((u,i) => {
        const d = document.createElement('div');
        d.className = 'image-preview';
        d.innerHTML = `
          <img src="${u}">
          <button type="button" class="image-remove" onclick="removeMainImage(${i})">×</button>
        `;
        c.appendChild(d);
      });
    }
    function removeMainImage(i) {
      STATE.uploadedImages.splice(i,1);
      renderMainPreviews();
    }

    // ----- Variants -----
    function removeVariant(idx) {
      delete STATE.variants[idx];
      document.getElementById(`variant-${idx}`).remove();
    }
    function renderVariantPreviews(idx) {
      const c = document.getElementById(`variant-preview-${idx}`);
      c.innerHTML = '';
      STATE.variants[idx].images.forEach((u,i) => {
        const d = document.createElement('div');
        d.className = 'image-preview';
        d.innerHTML = `
          <img src="${u}">
          <button type="button" class="image-remove"
                  onclick="removeVariantImage(${idx},${i})">×</button>
        `;
        c.appendChild(d);
      });
    }
    function removeVariantImage(idx,i) {
      STATE.variants[idx].images.splice(i,1);
      renderVariantPreviews(idx);
    }

    // Add new variant
    document.getElementById('add-variant-btn').addEventListener('click', () => {
      const idx = variantCount++;
      STATE.variants[idx] = { images: [] };
      const c = document.getElementById('variants-container');
      c.insertAdjacentHTML('beforeend', `
        <div class="variant-block" id="variant-${idx}">
          <button type="button" class="btn btn-ghost"
                  style="float:right"
                  onclick="removeVariant(${idx})">
            × Remove
          </button>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Size *</label>
              <select name="variants[${idx}][size]" class="form-select" required>
                <option value="">Select size</option>
                <option value="xs">XS</option>
                <option value="sm">SM</option>
                <option value="md">MD</option>
                <option value="lg">LG</option>
                <option value="xl">XL</option>
                <option value="xxl">XXL</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">Color *</label>
              <input type="text" name="variants[${idx}][color]"
                     class="form-input" required>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Price *</label>
              <input type="number" name="variants[${idx}][price]"
                     class="form-input" step="0.01" min="0" required>
            </div>
            <div class="form-group">
              <label class="form-label">Sale Price</label>
              <input type="number" name="variants[${idx}][salePrice]"
                     class="form-input" step="0.01" min="0">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Stock *</label>
              <input type="number" name="variants[${idx}][stock]"
                     class="form-input" min="0" required>
            </div>
            <div class="form-group">
              <label class="form-label">Images *</label>
              <div class="image-upload-area" id="variant-upload-${idx}">
                Click or drag
              </div>
              <div class="image-preview-container" id="variant-preview-${idx}"></div>
            </div>
          </div>
        </div>
      `);
      // wire up that new upload area:
      const area = document.getElementById(`variant-upload-${idx}`);
      area.addEventListener('click', () => openFileDialog(idx));
      area.addEventListener('dragover', e => { e.preventDefault(); area.style.borderColor='var(--primary)'; });
      area.addEventListener('dragleave', e => { e.preventDefault(); area.style.borderColor='var(--gray-300)'; });
      area.addEventListener('drop', e => { e.preventDefault(); handleFiles([...e.dataTransfer.files], idx); });
    });

    // ----- Form Submit -----
    document.getElementById('product-form').addEventListener('submit', async e => {
      e.preventDefault();
      clearFormErrors();

      // basic validation
      if (!document.getElementById('product-name').value.trim())
        return showFormError('name-error','Name is required');
      if (STATE.uploadedImages.length < MIN_IMAGES)
        return showFormError('images-error',`At least ${MIN_IMAGES} images`);

      const variantKeys = Object.keys(STATE.variants);
      if (!variantKeys.length)
        return showFormError('variants-error','Add at least one variant');

      for (let idx of variantKeys) {
        const block = document.getElementById(`variant-${idx}`);
        const size  = block.querySelector(`[name="variants[${idx}][size]"]`).value;
        const color = block.querySelector(`[name="variants[${idx}][color]"]`).value;
        const price = block.querySelector(`[name="variants[${idx}][price]"]`).value;
        const stock = block.querySelector(`[name="variants[${idx}][stock]"]`).value;
        if (!size||!color||!price||!stock)
          return showFormError('variants-error','All variant fields are required');
        if (STATE.variants[idx].images.length < MIN_IMAGES)
          return showFormError('variants-error',`Each variant needs ${MIN_IMAGES} images`);
      }

      const payload = {
        name:        document.getElementById('product-name').value.trim(),
        description: document.getElementById('product-description').value.trim(),
        category:    document.getElementById('product-category').value,
        brand:       document.getElementById('product-brand').value || null,
        regularPrice: parseFloat(document.getElementById('product-regular-price').value),
        salePrice:    parseFloat(document.getElementById('product-sale-price').value)||0,
        stock:        parseInt(document.getElementById('product-stock').value)||0,
        images:      STATE.uploadedImages,
        isActive:    document.getElementById('product-active').checked,
        isFeatured:  document.getElementById('product-featured').checked,
        variants:    variantKeys.map(idx=>({
          size:      document.querySelector(`[name="variants[${idx}][size]"]`).value,
          color:     document.querySelector(`[name="variants[${idx}][color]"]`).value,
          price:     Number(document.querySelector(`[name="variants[${idx}][price]"]`).value),
          salePrice: Number(document.querySelector(`[name="variants[${idx}][salePrice]"]`).value)||0,
          stock:     Number(document.querySelector(`[name="variants[${idx}][stock]"]`).value),
          images:    STATE.variants[idx].images
        }))
      };

      showLoading();
      document.getElementById('product-spinner').classList.add('active');
      document.getElementById('product-submit-btn').disabled = true;

      try {
        const res = await fetch(`${BASE_URL}/admin/products/api/update/${PRODUCT_ID}`, {
          method: 'PUT',
          headers: { 'Content-Type':'application/json' },
          body: JSON.stringify(payload)
        });
        const j = await res.json();
        hideLoading();
        document.getElementById('product-spinner').classList.remove('active');
        document.getElementById('product-submit-btn').disabled = false;

        if (j.success) {
          document.getElementById('dynamic-success-msg').textContent = 'Updated!';
          document.getElementById('dynamic-success-msg').classList.add('show');
          setTimeout(()=>window.location='/admin/products/all',1500);
        } else if (j.errors) {
          Object.entries(j.errors).forEach(([f,m])=>showFormError(`${f}-error`,m));
        } else {
          showFormError('dynamic-error-msg', j.message||'Save failed');
        }
      } catch (err) {
        hideLoading();
        showFormError('dynamic-error-msg','An error occurred');
        console.error(err);
      }
    });

    // ----- Init on load -----
    document.addEventListener('DOMContentLoaded', () => {
      initializeImageUpload();
      renderMainPreviews();
      Object.keys(STATE.variants).forEach(idx=>renderVariantPreviews(idx));
    });
  </script>
</body>
</html>
