<!-- views/user/profile/addresses.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My addresses – <%= user.name %></title>

    <!-- Icons & Font -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />

    <style>
      /* ----------  Design tokens  ---------- */
      :root {
        --bg: #fafafa;
        --white: #ffffff;
        --primary: #111827;
        --muted: #6b7280;
        --accent: #000;
        --accent-dark: #000;
        --radius: 12px;
        --tr: 0.25s;
        --shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.08);
      }

      .show {
        display: flex !important;
        opacity: 1;
      }

      /* ----------  Reset & globals  ---------- */
      *,
      *::before,
      *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      body {
        font-family: "Inter", system-ui, sans-serif;
        background: var(--bg);
        color: var(--primary);
        line-height: 1.45;
      }
      a {
        color: inherit;
      }

      /* ----------  Layout  ---------- */
      .profile-wrapper {
        display: flex;
        min-height: 100dvh;
        max-width: 1300px;
        margin: auto;
      }
      main.profile-main {
        flex: 1;
        padding: 2rem 2rem 4rem;
      }

      /* ----------  Sidebar  ---------- */
      .profile-sidebar {
        width: 290px;
        background: var(--white);
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        padding: 2rem 0;
        transition: transform var(--tr);
        z-index: 850;
      }
      .profile-sidebar-header {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        padding: 0 20px;
        margin-bottom: 2rem;
      }

  .profile-avatar-mini {
    inline-size: 56px;
    block-size: 46px;
    border-radius: 50%;
    background: #dbeafe;
    display: grid;
    place-items: center;
    font-weight: 600;
    overflow: hidden;
  }


  .profile-avatar-mini img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }


nav.profile-nav ul {
        list-style: none;
  }


      nav.profile-nav a {
        display: flex;
        align-items: center;
        gap: 0.7rem;
        padding: 0.85rem 1.6rem;
        text-decoration: none;
        color: inherit;
        border-left: 3px solid transparent;
        transition: background var(--tr), color var(--tr);
      }

    
      nav.profile-nav a i {
        width: 18px;
        text-align: center;
        font-size: 0.9rem;
      }

      nav.profile-nav a:hover {
        background: #f3f4f6;
      }

      nav.profile-nav a.active {
        border-color: var(--accent);
        background: #eef4ff;
        color: var(--accent-dark);
        font-weight: 500;
      }


      .profile-logout {
        margin-top: auto;
        padding: 0.85rem 1.6rem;
        background: none;
        border: none;
        font: inherit;
        text-align: left;
        cursor: pointer;
        color: var(--muted);
      }

      .profile-logout i {
        margin-right: 0.5rem;
      }

      .profile-logout:hover {
        color: var(--accent-dark);
      }

      /* ----------  Mobile header  ---------- */
      .profile-mobile-top {
        display: none;
        position: sticky;
        top: 0;
        z-index: 1;
        background: var(--white);
        border-bottom: 1px solid #e5e7eb;
        padding: 1rem 1.25rem;
        align-items: center;
        justify-content: space-between;
      }
      .profile-burger {
        background: none;
        border: none;
        font-size: 1.3rem;
        cursor: pointer;
      }

      /* overlay */
      .profile-overlay {
        display: none;
        position: fixed;
        inset: 0;
        background: #0005;
        z-index: 800;
      }
      .profile-overlay.show {
        display: block;
      }

      /* ----------  Breadcrumb  ---------- */
      .profile-crumb {
        font-size: 0.85rem;
        color: var(--muted);
        margin-bottom: 1.4rem !important;
      }
      .profile-crumb i {
        margin-inline: 0.25rem;
      }

      /* ----------  Toolbar  ---------- */
      .addr-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.4rem;
      }
      .addr-add-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.45rem;
        background: var(--accent);
        color: #fff;
        border: none;
        padding: 0.55rem 1rem;
        border-radius: var(--radius);
        font-size: 0.9rem;
        cursor: pointer;
        transition: background var(--tr), transform var(--tr);
        box-shadow: var(--shadow);
      }
      .addr-add-btn:hover {
        background: var(--accent-dark);
        transform: translateY(-1px);
      }
      .addr-add-btn i {
        font-size: 0.95rem;
      }

      /* ----------  Address cards  ---------- */
      .addr-grid {
        display: grid;
        gap: 1.4rem;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      }


      .addr-card {
        position: relative;
        background: var(--white);
        border-radius: var(--radius);
        padding: 1.2rem 1rem 1.1rem;
        box-shadow: var(--shadow);
        transition: box-shadow var(--tr), transform var(--tr);
      }
      .addr-card:hover {
        box-shadow: var(--shadow-lg);
        transform: translateY(-2px);
      }
      .badge-default {
        position: absolute;
        top: 12px;
        right: 12px;
        font-size: 0.65rem;
        text-transform: uppercase;
        background: var(--accent);
        color: #fff;
        padding: 0.18rem 0.45rem;
        border-radius: 10px;
        letter-spacing: 0.03em;
      }
      .addr-type {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
        font-size: 0.75rem;
        background: #f3f4f6;
        color: var(--muted);
        padding: 0.2rem 0.55rem;
        border-radius: var(--radius);
        margin-top: 0.4rem;
        text-transform: capitalize;
      }
      .addr-actions {
        display: flex;
        gap: 1.1rem;
        margin-top: 0.9rem;
        font-size: 0.85rem;
      }
      .addr-actions a {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
        text-decoration: none;
        transition: color var(--tr);
      }
      .addr-actions a.text-info {
        color: var(--accent);
      }
      .addr-actions a.text-danger {
        color: #dc2626;
      }
      .addr-actions a:hover {
        opacity: 0.8;
      }

      /* ----------  Modal  ---------- */
      .modal-overlay {
        display: none;
        position: fixed;
        inset: 0;
        background: #0006;
        backdrop-filter: blur(2px);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 1rem;
      }
      .modal-overlay.show {
        display: flex;
        animation: fadeIn 0.25s ease-out;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      
      .modal-box {
        background: var(--white);
        border-radius: var(--radius);
        box-shadow: var(--shadow-lg);
        width: 100%;
        max-width: 480px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        animation: slideUp 0.25s ease-out;
      }

      @keyframes slideUp {
        from {
          transform: translateY(20px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }
      .modal-header,
      .modal-footer {
        padding: 1.1rem 1.2rem;
        background: #f8fafc;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .modal-header h3 {
        font-size: 1rem;
      }
      .modal-body {
        padding: 1.2rem 1.2rem 0.6rem;
        max-height: 70vh;
        overflow-y: auto;
      }

      /* form */
      .form-group {
        margin-bottom: 1rem;
      }
      .form-group label {
        font-size: 0.78rem;
        font-weight: 500;
        display: block;
        margin-bottom: 0.3rem;
      }
      .form-group input[type="text"],
      .form-group input[type="tel"] {
        width: 100%;
        padding: 0.55rem 0.55rem;
        border: 1px solid #d1d5db;
        border-radius: var(--radius);
        font: inherit;
        transition: border-color var(--tr), box-shadow var(--tr);
      }
      .form-group input:focus {
        border-color: var(--accent);
        box-shadow: 0 0 0 2px #bfdbfe;
        outline: none;
      }
      .form-group input.invalid {
        border-color: #dc2626;
      }
      .error-note {
        font-size: 0.7rem;
        color: #dc2626;
        margin-top: 0.25rem;
      }
      .inline {
        display: flex;
        gap: 1rem;
      }
      .inline .form-group {
        flex: 1;
      }
      .modal-footer button {
        display: inline-flex;
        align-items: center;
        gap: 0.45rem;
        border: none;
        border-radius: var(--radius);
        padding: 0.55rem 1rem;
        font-size: 0.9rem;
        cursor: pointer;
      }
      .btn-secondary {
        background: #e5e7eb;
        color: #374151;
      }
      .btn-dark {
        background: var(--accent);
        color: #fff;
      }
      .btn-dark:disabled {
        opacity: 0.7;
        cursor: not-allowed;
      }

      .note {
        padding: 0.65rem 1rem;
        border-radius: var(--radius);
        font-size: 0.85rem;
        margin-top: 1rem;
      }
      .note.error {
        background: #fee2e2;
        color: #b91c1c;
      }
      .note.success {
        background: #dcfce7;
        color: #15803d;
      }

      /* ----------  Responsive ---------- */
      @media (max-width: 768px) {
        .profile-wrapper {
          flex-direction: column;
        }
        main.profile-main {
          padding: 1.5rem 1.25rem 4rem;
        }
        .profile-sidebar {
          position: fixed;
          inset: 0 50% 0 0;
          transform: translateX(-100%);
          box-shadow: var(--shadow-lg);
        }
        .profile-sidebar.open {
          transform: translateX(0);
        }
        .profile-mobile-top {
          display: flex;
        }
      }

.confirm-modal {
  display: none;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.45);
  backdrop-filter: blur(1px);
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.confirm-modal.show {
  display: flex;
  animation: fadeIn 0.2s ease-out;
}

.confirm-modal-content {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  max-width: 380px;
  width: 100%;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
  text-align: center;
}

.confirm-text {
  font-size: 1rem;
  color: #1f2937;
}

.confirm-actions {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1.4rem;
}

.btn-confirm-yes {
  background-color: #dc2626;
  color: white;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
}

.btn-confirm-no {
  background-color: #e5e7eb;
  color: #111827;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.96);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}




    </style>
  </head>

  <body>

    <div id="confirmModal" class="confirm-modal">
  <div class="confirm-modal-content">
    <p class="confirm-text">Are you sure you want to delete this address?</p>
    <div class="confirm-actions">
      <button id="confirmYes" class="btn-confirm-yes">Yes</button>
      <button id="confirmNo" class="btn-confirm-no">Cancel</button>
    </div>
  </div>
</div>


    <!-- Mobile header -->
    <header class="profile-mobile-top">
      <button
        class="profile-burger"
        aria-label="Toggle navigation"
        onclick="toggleMenu()"
      >
        <i class="fas fa-bars"></i>
      </button>
      <span>My address book</span>
      <span></span>
    </header>

    <!-- overlay -->
    <div class="profile-overlay" onclick="toggleMenu()"></div>

    <div class="profile-wrapper">
      <!-- Sidebar -->
      <aside class="profile-sidebar" id="side">
        <div class="profile-sidebar-header">


                  <div class="profile-avatar-mini">
            <% if(user.profileImage){ %>
            <img src="<%= user.profileImage %>" alt="profile" />
            <% }else{ %> <%= user.name[0].toUpperCase() %> <% } %>
          </div>


          <div>
            <strong><%= user.name %></strong><br />
            <span style="font-size: 0.78rem; color: var(--muted)"
              ><%= user.email %></span
            >
          </div>
        </div>

        <nav class="profile-nav">
          <ul>
                     <li><a href="/user/profile" ><i class="fas fa-user"></i>Personal data</a></li>
          <li><a href="/user/profile/address" class="active"><i class="fas fa-map-marker-alt"></i>Addresses</a></li>
          <li><a href="/user/profile/orders"><i class="fas fa-box"></i>Orders</a></li>
          <li><a href="/user/profile/wallet"><i class="fas fa-wallet"></i>Wallet</a></li>
          <li><a href="/contact-us"><i class="fas fa-phone"></i>Contact us</a></li>
          </ul>
        </nav>

        <button class="profile-logout" onclick="location.href='/logout'">
          <i class="fas fa-sign-out-alt"></i>Log out
        </button>
      </aside>

      <!-- Main -->
      <main class="profile-main">
        <!-- Breadcrumb -->
        <p class="profile-crumb">
          <i class="fas fa-house"></i> Home
          <i class="fas fa-angle-right"></i> Account
          <i class="fas fa-angle-right"></i> Addresses
        </p>

        <h1 style="font-size: 1.4rem; margin-bottom: 1.2rem">
          My address book
        </h1>

        <div id="pageNote"></div>

        <div class="addr-toolbar">
          <span></span>
          <button class="addr-add-btn" id="addBtn">
            <i class="fas fa-plus-circle"></i>Add address
          </button>
        </div>

        <!-- Cards -->
        <div class="addr-grid">
          <% if (addresses && addresses.length) { %>
          <% addresses.forEach(a => { %>
          <div class="addr-card">
            <% if (a.isDefault) { %>
            <span class="badge-default">default</span>
            <% } %>
            <h4 style="font-size: 1.05rem; margin-bottom: 0.15rem">
              <%= a.fullName %>
            </h4>
            <p style="margin: 0.3rem 0"><%= a.street %></p>
            <p style="margin: 0.3rem 0">
              <%= a.city %>, <%= a.state %> – <%= a.pincode %>
            </p>
            <p style="margin: 0.4rem 0">
              <i class="fas fa-phone"></i> <%= a.phone %>
            </p>
            <% if (a.type) { %>
            <div class="addr-type">
              <i
                class="fas fa-<%= a.type === 'home' ? 'home' : 'briefcase' %>"
              ></i>
              <%= a.type %>
            </div>
            <% } %>

            <div class="addr-actions">
              <a
                href="#"
                class="text-info editBtn"
                data-json='<%- JSON.stringify(a) %>'
                ><i class="fas fa-edit"></i>Edit</a
              >
              <a
                href="#"
                class="text-danger deleteBtn"
                data-id="<%= a._id %>"
                ><i class="fas fa-trash"></i>Delete</a
              >
            </div>
          </div>
          <% }); %>
          <% } else { %>
          <div class="note error" style="text-align: center">
            No addresses yet – click “Add address”.
          </div>
          <% } %>
        </div>
      </main>
    </div>

    <!-- Modal -->
    <div class="modal-overlay" id="modal">
      <div class="modal-box">
        <div class="modal-header">
          <h3 id="modalTitle">Add address</h3>
          <button onclick="closeModal()" aria-label="Close">
            <i class="fas fa-times"></i>
          </button>
        </div>

        <form id="addrForm">
          <div class="modal-body">
            <input type="hidden" name="_method" id="methodField" value="POST" />
            <input type="hidden" name="addressId" id="addressId" />

            <div class="form-group">
              <label>Full name *</label>
              <input type="text" name="fullName" id="fullName" />
              <small class="error-note" data-err="fullName"></small>
            </div>

            <div class="form-group">
              <label>Phone *</label>
              <input type="tel" name="phone" id="phone" />
              <small class="error-note" data-err="phone"></small>
            </div>

            <div class="form-group">
              <label>Street *</label>
              <input type="text" name="street" id="street" />
              <small class="error-note" data-err="street"></small>
            </div>

            <div class="inline">
              <div class="form-group">
                <label>City *</label>
                <input type="text" name="city" id="city" />
                <small class="error-note" data-err="city"></small>
              </div>
              <div class="form-group">
                <label>State *</label>
                <input type="text" name="state" id="state" />
                <small class="error-note" data-err="state"></small>
              </div>
            </div>

            <div class="form-group">
              <label>Pincode *</label>
              <input type="text" name="pincode" id="pincode" />
              <small class="error-note" data-err="pincode"></small>
            </div>

            <div class="form-group">
              <label>Address type</label>
              <div style="display: flex; gap: 1rem">
                <label style="display: flex; align-items: center; gap: 0.4rem">
                  <input type="radio" name="addressType" value="home" checked />
                  <i class="fas fa-home"></i> Home
                </label>
                <label style="display: flex; align-items: center; gap: 0.4rem">
                  <input type="radio" name="addressType" value="work" />
                  <i class="fas fa-briefcase"></i> Work
                </label>
              </div>
            </div>

            <div class="form-group" style="margin-bottom: 0.5rem">
              <label style="display: flex; align-items: center; gap: 0.6rem">
                <input style="width: 15px;" type="checkbox" name="isDefault" id="isDefaultBox" />
                Set as default
              </label>
            </div>

            <div id="modalMsg"></div>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn-secondary" onclick="closeModal()">
              Cancel
            </button>
            <button type="submit" class="btn-dark" id="submitBtn">
              <i class="fas fa-save"></i>Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- ----------  Scripts  ---------- -->
    <script>
      const BASE = location.origin;

      /* ===== sidebar mobile toggle ===== */
      function toggleMenu() {
        document.getElementById("side").classList.toggle("open");
        document.querySelector(".profile-overlay").classList.toggle("show");
      }

      /* ===== modal helpers ===== */
      function openModal() {
        document.getElementById("modal").classList.add("show");
      }
      function closeModal() {
        document.getElementById("modal").classList.remove("show");
        document.getElementById("addrForm").reset();
        document.getElementById("modalMsg").innerHTML = "";
        clearFieldErrors();
      }

      /* ===== utility ===== */
      function showMsg(target, text, type = "error") {
        document.querySelector(target).innerHTML = `<div class="note ${
          type === "success" ? "success" : "error"
        }">${text}</div>`;
      }
      function setLoading(btn, label) {
        btn.disabled = true;
        btn.dataset.orig = btn.innerHTML;
        btn.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${label}`;
      }
      function clearLoading(btn) {
        btn.disabled = false;
        btn.innerHTML = btn.dataset.orig;
      }

      /* ===== fill form for add / edit ===== */
      function fillForm(o = {}) {
        document.getElementById("modalTitle").textContent = o._id
          ? "Edit address"
          : "Add address";
        document.getElementById("methodField").value = o._id ? "PUT" : "POST";
        document.getElementById("addressId").value = o._id || "";
        const f = document.getElementById("addrForm");
        f.fullName.value = o.fullName || "";
        f.phone.value = o.phone || "";
        f.street.value = o.street || "";
        f.city.value = o.city || "";
        f.state.value = o.state || "";
        f.pincode.value = o.pincode || "";
        document.getElementById("isDefaultBox").checked = !!o.isDefault;
        if (o.type === "work") f.addressType.value = "work";
        else f.addressType.value = "home";
      }

      /* ===== open empty modal ===== */
      document.getElementById("addBtn").onclick = () => {
        fillForm();
        openModal();
      };

      /* ===== edit buttons ===== */
      document.querySelectorAll(".editBtn").forEach((b) => {
        b.onclick = (e) => {
          e.preventDefault();
          fillForm(JSON.parse(b.dataset.json));
          openModal();
        };
      });

      /* ===== delete buttons ===== */
    // Show modal
document.querySelectorAll(".deleteBtn").forEach((btn) => {
  btn.addEventListener("click", (e) => {
    e.preventDefault();
    addressIdToDelete = btn.dataset.id;
    document.getElementById("confirmModal").classList.add("show");
  });
});

// Confirm deletion
document.getElementById("confirmYes").addEventListener("click", async () => {
  if (!addressIdToDelete) return;

  try {
    const res = await fetch(`/user/profile/address/${addressIdToDelete}/delete`, {
      method: "DELETE",
    });
    const out = await res.json();
    if (!res.ok) throw new Error(out.message);
await refreshAddresses();
bindAddressActionEvents();
  } catch (err) {
    showGlobalToast(err.message || "Failed to delete address",'error');
  } finally {
    addressIdToDelete = null;
    document.getElementById("confirmModal").classList.remove("show");
  }
});

// Cancel modal
document.getElementById("confirmNo").addEventListener("click", () => {
  document.getElementById("confirmModal").classList.remove("show");
  addressIdToDelete = null;
});

      /* ===== validation helpers ===== */
      const validators = {
        fullName: (v) => /^[A-Za-z\s.'-]{3,60}$/.test(v.trim()),
        phone: (v) => /^[6-9]\d{9}$/.test(v.trim()),
        street: (v) => v.trim().length >= 5 && v.trim().length <= 120,
        city: (v) => /^[A-Za-z\']{4,50}$/.test(v.trim()),
        state: (v) => /^[A-Za-z\']{4,50}$/.test(v.trim()),
        pincode: (v) => /^\d{6}$/.test(v.trim()),
      };

      function clearFieldErrors() {
        document
          .querySelectorAll(".error-note")
          .forEach((el) => (el.textContent = ""));
        document
          .querySelectorAll(".form-group input")
          .forEach((i) => i.classList.remove("invalid"));
      }

      function validateAddressPayload(data) {
        clearFieldErrors();
        let ok = true;
        for (const [field, fn] of Object.entries(validators)) {

          if (!fn(data[field] || "")) {
            ok = false;
            const msgEl = document.querySelector(`[data-err="${field}"]`);
            const inEl = document.getElementById(field);
            if (msgEl) msgEl.textContent = "Invalid " + field;
            if (inEl) inEl.classList.add("invalid");
          }

        }
        return ok;
      }

      document.getElementById("addrForm").addEventListener("submit", async (e) => {
          e.preventDefault();
          showMsg("#modalMsg", "");
          const btn = document.getElementById("submitBtn");
          setLoading(btn, "Saving");

          const fd = new FormData(e.target);

          // console.log(fd.get("addressType"),);
          

          const payload = {
            fullName: fd.get("fullName"),
            phone: fd.get("phone"),
            street: fd.get("street"),
            city: fd.get("city"),
            state: fd.get("state"),
            pincode: fd.get("pincode"),
            type: fd.get("addressType"),
            isDefault: !!fd.get("isDefault"),
          };

          if (!validateAddressPayload(payload)) {
            clearLoading(btn);
            return;
          }

          const isEdit = fd.get("_method") === "PUT";

          const id = fd.get("addressId");

          const url = isEdit
            ? `${BASE}/user/profile/address/${id}/edit`
            : `${BASE}/user/profile/address/add`;
          const method = isEdit ? "PUT" : "POST";

          try {
            const r = await fetch(url, {
              method,
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });

            const out = await r.json();

            if (!r.ok) throw new Error(out.message);
            
            showGlobalToast(out.message || "Saved", "success");
            closeModal();
         await refreshAddresses();
bindAddressActionEvents();
          } catch (err) {
            showGlobalToast(err.message,'error');
          } finally {
            clearLoading(btn);
          }


        });

      /* ===== close modal on outside click ===== */
      document
        .getElementById("modal")
        .addEventListener("click", (e) => {
          if (e.target.id === "modal") closeModal();
        });


        async function refreshAddresses() {
  try {
    // Fetch latest addresses from the backend
    const res = await fetch('/user/profile/address/api/filtered/all');
    const {addresses , success} = await res.json();
    if (!Array.isArray(addresses) && !success) throw new Error('Failed to fetch addresses');

    const html = addresses.length
      ? addresses.map((a) => `
        <div class="addr-card">
          ${a.isDefault ? `<span class="badge-default">default</span>` : ''}
          <h4 style="font-size: 1.05rem; margin-bottom: 0.15rem">
            ${a.fullName}
          </h4>
          <p style="margin: 0.3rem 0">${a.street}</p>
          <p style="margin: 0.3rem 0">
            ${a.city}, ${a.state} – ${a.pincode}
          </p>
          <p style="margin: 0.4rem 0">
            <i class="fas fa-phone"></i> ${a.phone}
          </p>
          ${a.type ? `
            <div class="addr-type">
              <i class="fas fa-${a.type === 'home' ? 'home' : 'briefcase'}"></i> ${a.type}
            </div>` : ''}
          <div class="addr-actions">
            <a href="#" class="text-info editBtn"
               data-json='${JSON.stringify(a)}'>
              <i class="fas fa-edit"></i>Edit
            </a>
            <a href="#" class="text-danger deleteBtn"
               data-id="${a._id}">
              <i class="fas fa-trash"></i>Delete
            </a>
          </div>
        </div>
      `).join('') : `
        <div class="note error" style="text-align: center">
          No addresses yet – click “Add address”.
        </div>`;

    document.querySelector('.addr-grid').innerHTML = html;

  } catch (err) {
    document.querySelector('.addr-grid').innerHTML =
      `<div class="note error" style="text-align: center">
        ${err.message || "Failed to load addresses"}
      </div>`;
  }
}


function bindAddressActionEvents() {

  document.querySelectorAll(".editBtn").forEach((b) => {
    b.onclick = e => {
      e.preventDefault();
      fillForm(JSON.parse(b.dataset.json));
      openModal();
    };
  });

  document.querySelectorAll(".deleteBtn").forEach((btn) => {
    btn.onclick = e => {
      e.preventDefault();
      addressIdToDelete = btn.dataset.id;
      document.getElementById("confirmModal").classList.add("show");
    };
  });
}


    </script>
  </body>
</html>
