<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Edit profile â€“ <%= user.name %></title>

    <!-- icons & font -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />


        <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css"/>
<style>
  /* ---------- Design Tokens ---------- */
  :root {
    --bg: #fafafa;
    --white: #fff;
    --primary: #111827;
    --text: #111827;
    --muted: #6b7280;
    --accent: #000;
    --accent-dark: #000;
    --radius: 12px;
    --tr: 0.25s;
    --shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.08);
  }

  /* ---------- Reset ---------- */
  *, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  body {
    font-family: "Inter", system-ui, sans-serif;
    background: var(--bg);
    color: var(--primary);
    line-height: 1.45;
  }
  a {
    color: inherit;
    text-decoration: none;
  }

  /* ---------- Layout ---------- */
  .profile-wrapper {
    display: flex;
    min-height: 100dvh;
    max-width: 1300px;
    margin: auto;
  }
  main.profile-main {
    flex: 1;
    padding: 2rem 2rem 4rem;
  }

  /* ---------- Sidebar ---------- */
  .profile-sidebar {
    width: 290px;
    background: var(--white);
    border-right: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    padding: 2rem 0;
    transition: transform var(--tr);
    z-index: 850;
  }
  .profile-sidebar-header {
    display: flex;
    align-items: center;
    gap: 0.85rem;
    padding: 0 10px;
    margin-bottom: 2rem;
  }
  .profile-avatar-mini {
    inline-size: 46px;
    block-size: 46px;
    border-radius: 50%;
    background: #dbeafe;
    display: grid;
    place-items: center;
    font-weight: 600;
    overflow: hidden;
  }
  .profile-avatar-mini img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  nav.profile-nav ul {
    list-style: none;
  }
  nav.profile-nav a {
    display: flex;
    align-items: center;
    gap: 0.7rem;
    padding: 0.85rem 1.6rem;
    border-left: 3px solid transparent;
    transition: background var(--tr), color var(--tr);
  }
  nav.profile-nav a i {
    width: 18px;
    text-align: center;
    font-size: 0.9rem;
  }
  nav.profile-nav a:hover {
    background: #f3f4f6;
  }
  nav.profile-nav a.active {
    border-color: var(--accent);
    background: #eef4ff;
    color: var(--accent-dark);
    font-weight: 500;
  }
  .profile-logout {
    margin-top: auto;
    padding: 0.85rem 1.6rem;
    background: none;
    border: none;
    font: inherit;
    text-align: left;
    cursor: pointer;
    color: var(--muted);
    transition: color var(--tr);
  }
  .profile-logout i {
    margin-right: 0.5rem;
  }
  .profile-logout:hover {
    color: var(--accent-dark);
  }

  /* ---------- Mobile Header ---------- */
  .profile-mobile-top {
    display: none;
    position: sticky;
    top: 0;
    z-index: 1;
    background: var(--white);
    border-bottom: 1px solid #e5e7eb;
    padding: 1rem 1.25rem;
    align-items: center;
    justify-content: space-between;
  }
  .profile-burger {
    background: none;
    border: none;
    font-size: 1.3rem;
    cursor: pointer;
  }

  .profile-overlay {
    display: none;
    position: fixed;
    inset: 0;
    background: #0005;
    z-index: 800;
  }
  .profile-overlay.show {
    display: block;
  }

  /* ---------- Breadcrumb ---------- */
  .profile-crumb {
    font-size: 0.85rem;
    color: var(--muted);
    margin-bottom: 1.4rem !important;
  }
  .profile-crumb i {
    margin-inline: 0.25rem;
  }

  /* ---------- Hero Photo ---------- */
  .profile-photo {
    position: relative;
    width: max-content;
    margin-bottom: 2rem;
  }
  .profile-avatar-lg {
    width: 105px;
    height: 105px;
    border-radius: 50%;
    background: #dbeafe;
    display: grid;
    place-items: center;
    font-size: 2.1rem;
    font-weight: 600;
    color: var(--primary);
    overflow: hidden;
    box-shadow: var(--shadow);
  }
  .profile-avatar-lg img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .avatar-edit-btn {
    position: absolute;
    inset: auto 0 0 auto;
    transform: translate(25%, 25%);
    width: 34px;
    height: 34px;
    border-radius: 50%;
    display: grid;
    place-items: center;
    background: var(--accent);
    color: #fff;
    font-size: 0.9rem;
    cursor: pointer;
    box-shadow: var(--shadow);
    transition: background var(--tr);
  }
  .avatar-edit-btn:hover {
    background: var(--accent-dark);
  }
  input[type="file"] {
    display: none;
  }

  /* ---------- Form ---------- */
  form {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  }
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
  }
  label {
    font-size: 0.78rem;
    font-weight: 600;
    color: var(--muted);
  }
  .input-box {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: var(--white);
    border: 1px solid #d1d5db;
    border-radius: var(--radius);
    padding: 0.7rem 1rem;
    transition: border-color var(--tr), box-shadow var(--tr);
  }
  .input-box:focus-within {
    border-color: var(--accent);
    box-shadow: 0 0 0 3px #d1d5db;
  }
  .input-box i {
    color: var(--muted);
  }
  .input-box input {
    border: none;
    background: none;
    outline: none;
    font-size: 0.95rem;
    color: var(--text);
    flex: 1;
  }

  .save-btn {
    justify-self: start;
    padding: 0.8rem 1.3rem;
    font-size: 0.9rem;
    display: inline-flex;
    align-items: center;
    gap: 0.6rem;
    background: var(--accent);
    color: var(--white);
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    transition: background var(--tr), transform var(--tr);
    height: 45px;
    margin: auto 0;
  }
  .save-btn[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
  .save-btn:hover:not([disabled]) {
    background: var(--accent-dark);
    transform: translateY(-2px);
  }

  .note {
    grid-column: 1/-1;
    padding: 0.8rem 1.1rem;
    border-left: 4px solid;
    border-radius: var(--radius);
    font-size: 0.9rem;
  }
  .note.error {
    background: #fef2f2;
    border-color: #ef4444;
    color: #991b1b;
  }
  .note.success {
    background: #f0fdf4;
    border-color: #22c55e;
    color: #166534;
  }

  /* ---------- OTP Modal ---------- */
  .modal {
    display: none;
    position: fixed;
    inset: 0;
    justify-content: center;
    align-items: center;
    background: #0004;
    z-index: 1000;
  }
  .modal.show {
    display: flex;
    animation: fadeIn 0.25s ease-out;
  }
  .modal-content {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--radius);
    width: 90%;
    max-width: 380px;
    text-align: center;
    position: relative;
    animation: slideUp 0.25s ease-out;
  }
  .otp-input {
    width: 100%;
    padding: 0.7rem 1rem;
    margin-bottom: 1.1rem;
    border: 1px solid #d1d5db;
    border-radius: var(--radius);
  }
  .modal-btn {
    padding: 0.55rem 1.4rem;
    font-size: 0.9rem;
    background: var(--accent);
    color: #fff;
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }
  .modal-btn[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
  .close-x {
    position: absolute;
    top: 0.8rem;
    right: 0.9rem;
    background: none;
    border: none;
    font-size: 1.25rem;
    cursor: pointer;
    color: var(--muted);
  }
  .modal-note {
    font-size: 0.85rem;
    margin-bottom: 0.8rem;
  }
  .modal-note.error {
    color: #dc2626;
  }
  .modal-note.success {
    color: #15803d;
  }

  /* ---------- Cropper Modal ---------- */
 .cropper-modal {
  display: none;
  position: fixed;
  inset: 0;
  justify-content: center;
  align-items: center;
  background: rgba(17, 24, 39, 0.7); /* darker backdrop */
  z-index: 1050;
  opacity: 1 !important;
}

.show {
  display: flex !important;
  /* animation: fadeIn 0.25s ease-out; */
}

/* ---------- Cropper Modal ---------- */
.cropper-modal {
  display: none;
  position: fixed;
  inset: 0;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.85);
  backdrop-filter: blur(2px);
  z-index: 1050;
}

.otpmodal {
  display: none;
  position: fixed;
  inset: 0;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.85);
  backdrop-filter: blur(2px);
  z-index: 1050;
}

.cropper-modal.show {
  display: flex;
  animation: blurFadeIn 0.3s ease-out;
}

.cropper-modal-content {
  background: var(--white);
  padding: 1.5rem 1.2rem;
  border-radius: var(--radius);
  width: 90%;
  max-width: 450px;
  max-height: 90vh;
  overflow: auto;
  text-align: center;
  box-shadow: var(--shadow-lg);
  animation: slideUp 0.3s ease-out;
  position: relative;
}

.cropper-modal-title {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  font-weight: 600;
  color: var(--primary);
}

.cropper-close {
  position: absolute;
  top: 0.6rem;
  right: 0.8rem;
  background: none;
  border: none;
  font-size: 1.25rem;
  cursor: pointer;
  color: var(--muted);
}

#cropImg {
  display: block;
  max-width: 100%;
  max-height: 50vh;
  width: auto;
  height: auto;
  object-fit: contain;
  margin: 0 auto 1rem;
  border-radius: var(--radius);
}

/* Ensure canvas rendered by CropperJS also fits */
.cropper-modal-content canvas {
  display: block;
  max-width: 100%;
  max-height: 50vh;
  width: auto !important;
  height: auto !important;
  margin: 0 auto 1rem;
  border-radius: var(--radius);
  object-fit: contain;
}


.cropper-actions {
  display: flex;
  justify-content: flex-end;
  gap: 0.75rem;
  margin-top: 0.5rem;
}

.btn-primary,
.btn-secondary {
  padding: 0.55rem 1.3rem;
  font-size: 0.9rem;
  font-weight: 500;
  border: none;
  border-radius: var(--radius);
  cursor: pointer;
  transition: background var(--tr);
}

.btn-primary {
  background: var(--accent);
  color: var(--white);
}
.btn-primary:hover {
  background: var(--accent-dark);
}

.btn-secondary {
  background: #f3f4f6;
  color: var(--text);
}
.btn-secondary:hover {
  background: #e5e7eb;
}

/* Optional: constrain canvas (CropperJS renders canvas internally) */
.cropper-modal-content canvas {
  max-width: 100%;
  height: auto !important;
  border-radius: var(--radius);
}

/* ---------- Animations ---------- */
@keyframes blurFadeIn {
  from {
    opacity: 0;
    backdrop-filter: blur(0px);
  }
  to {
    opacity: 1;
    backdrop-filter: blur(2px);
  }
}
@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@media (max-width: 480px) {
  .cropper-modal-content {
    padding: 1rem 1rem;
  }

  #cropImg {
    max-height: 45vh;
  }
}



  /* ---------- Responsive ---------- */
  @media (max-width: 768px) {
    .profile-wrapper {
      flex-direction: column;
    }
    main.profile-main {
      padding: 1.5rem 1.25rem 4rem;
    }
    .profile-sidebar {
      position: fixed;
      inset: 0 50% 0 0;
      transform: translateX(-100%);
      box-shadow: var(--shadow-lg);
    }
    .profile-sidebar.open {
      transform: translateX(0);
    }
    .profile-mobile-top {
      display: flex;
    }
  }
</style>

  </head>

  <body>
    <!-- mobile header -->
    <header class="profile-mobile-top">
      <button
        class="profile-burger"
        aria-label="Toggle navigation"
        onclick="toggleMenu()"
      >
        <i class="fas fa-bars"></i>
      </button>
      <span>Edit profile</span>
    </header>

    <!-- overlay -->
    <div class="profile-overlay" onclick="toggleMenu()"></div>

    <div class="profile-wrapper">
      <!-- sidebar -->
      <aside class="profile-sidebar" id="side">
        <div class="profile-sidebar-header">
          <div class="profile-avatar-mini">
            <% if(user.profileImage){ %>
            <img src="<%= user.profileImage %>" alt="profile" />
            <% }else{ %> <%= user.name[0].toUpperCase() %> <% } %>
          </div>
          <div>
            <strong><%= user.name %></strong><br />
            <span style="font-size: 0.78rem; color: var(--muted)"
              ><%= user.email %></span
            >
          </div>
        </div>

        <nav class="profile-nav">
          <ul>
            <li>
              <a href="/user/profile" class="active"
                ><i class="fas fa-user"></i>Personal data</a
              >
            </li>
            <li>
              <a href="/user/profile/address"
                ><i class="fas fa-map-marker-alt"></i>Addresses</a
              >
            </li>
            <li>
              <a href="/user/profile/orders"
                ><i class="fas fa-box"></i>Orders</a
              >
            </li>
            <li>
              <a href="/user/profile/wallet"
                ><i class="fas fa-wallet"></i>Wallet</a
              >
            </li>
            <li>
              <a href="/contact-us"><i class="fas fa-phone"></i>Contact us</a>
            </li>
          </ul>
        </nav>

        <button class="profile-logout" onclick="location.href='/logout'">
          <i class="fas fa-sign-out-alt"></i>Log out
        </button>
      </aside>

      <!-- main -->
      <main class="profile-main">
        <p class="profile-crumb">
          <i class="fas fa-house"></i> Home
          <i class="fas fa-angle-right"></i> Account
          <i class="fas fa-angle-right"></i> Edit profile
        </p>

        <h1 style="font-size: 1.4rem; margin-bottom: 1.2rem">
          Edit profile
        </h1>

        <div id="pageNote"></div>

      


<div class="profile-photo">
  <% if(user.profileImage){ %>
    <div class="profile-avatar-lg" id="avatarPreview">
      <img src="<%= user.profileImage %>" alt="profile photo" />
    </div>
  <% }else{ %>
    <div class="profile-avatar-lg" id="avatarPreview"><%= user.name[0].toUpperCase() %></div>
  <% } %>


  <label class="avatar-edit-btn" for="avatarInput"><i class="fas fa-pencil"></i></label>
  <input id="avatarInput" type="file" accept="image/*"/>
</div>


        <div id="formMessage"></div>

        <!-- form -->
        <form id="editForm">
          <div class="form-group">
            <label for="name">Full name</label>
            <div class="input-box">
              <i class="fas fa-user"></i>
              <input
                id="name"
                name="name"
                type="text"
                
                value="<%= user.name %>"
              />
            </div>
          </div>

          <div class="form-group">
            <label for="email">E-mail address</label>
            <div class="input-box">
              <i class="fas fa-envelope"></i>
              <input
                id="email"
                name="email"
                type="email"
                
                value="<%= user.email %>"
              />
            </div>
          </div>

          <div class="form-group">
            <label for="phone">Phone number</label>
            <div class="input-box">
              <i class="fas fa-phone"></i>
              <input
                id="phone"
                name="phone"
                type="tel"
                value="<%= user.phone ?? '' %>"
              />
            </div>
          </div>

          <div class="form-group">
            <label for="dob">Date of birth</label>
            <div class="input-box">
              <i class="fas fa-calendar"></i>
              <input
                id="dob"
                name="dateOfBirth"
                type="date"
                value="<%= user.dateOfBirth ? user.dateOfBirth.toISOString().slice(0,10) : '' %>"
              />
            </div>
          </div>

          <button id="saveBtn" class="save-btn" type="submit">
            <i class="fas fa-save"></i> Save
          </button>
        </form>
      </main>
    </div>

    <!-- OTP modal -->
    <div class="otpmodal" id="otpModal">
      <div class="modal-content">
        <button class="close-x" onclick="closeModal()">
          <i class="fas fa-times"></i>
        </button>
        <h3>Email verification</h3>
        <p class="modal-note" id="otpMsg">
          We sent a 6-digit code to your new email.
        </p>
        <input type="hidden" id="emailOtpInput" />
        <input type="hidden" id="oldEmailOtpInput" />
        <input class="otp-input" id="otpInput" placeholder="Enter OTP" />
        <button id="otpBtn" class="modal-btn" onclick="verifyOTP()">
          <i class="fas fa-check"></i> Verify
        </button>
      </div>
    </div>


<!-- âœ… Safe crop modal -->
<div class="cropper-modal" id="cropModal">
  <div class="cropper-modal-content">
    <button class="cropper-close" onclick="closeCrop()">
      <i class="fas fa-times"></i>
    </button>
    <h3 class="cropper-modal-title">Crop photo</h3>
    <img id="cropImg" src="" alt="to-crop" />
    <div class="cropper-actions">
      <button class="btn-secondary" onclick="closeCrop()">Cancel</button>
      <button class="btn-primary" id="cropSaveBtn" onclick="cropAndSave(event)">
        <i class="fas fa-check"></i> Crop &amp; use
      </button>
    </div>
  </div>
</div>



        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>

    <!-- ---------- scripts ---------- -->
    <script>
      /* sidebar toggle */
      function toggleMenu() {
        document.getElementById("side").classList.toggle("open");
        document.querySelector(".profile-overlay").classList.toggle("show");
      }

      /* feedback helpers */
      function showMessage(text, type = "error", target = "#formMessage") {
        document.querySelector(target).innerHTML = `<div class="note ${
          type === "success" ? "success" : "error"
        }">${text}</div>`;
      }


      function setLoading(id, label) {
        const b = document.getElementById(id);
        b.disabled = true;
        b.dataset.orig = b.innerHTML;
        b.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${label}`;
      }


      function clearLoading(id) {
        const b = document.getElementById(id);
        b.disabled = false;
        b.innerHTML = b.dataset.orig;
      }

      /* form submit */
      document
        .getElementById("editForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();
          setLoading("saveBtn", "Saving");

          const form = document.getElementById('editForm')

    const formData = new FormData(form);

    if (avatarBlob) {
      console.log(avatarBlob);
      
      formData.append("avatar", avatarBlob, `avatar.${avatarBlob.type.split('/')[1]}`);
    }
          try {

            const r = await fetch("/user/profile/api/edit", {
              method: "PUT",
              body: formData,
            });

            const out = await r.json();
            console.log(out);
            
            if (!r.ok) throw new Error(out.message);


            if (out.verifyEmail) {


              document.getElementById("emailOtpInput").value = out.email;
              document.getElementById("oldEmailOtpInput").value = out.oldEmail;
              openModal();


            } else {
              showMessage("Profile updated successfully", "success");
              setTimeout(() => (location.href = "/user/profile/"), 1200);
            }


          } catch (err) {
            showMessage(err.message || "update failed");
          } finally {
            clearLoading("saveBtn");
            avatarBlob = null;
          }
        });

        

      /* modal & otp */
      function openModal() {
        document.getElementById("otpModal").classList.add("show");
      }


      function closeModal() {
        document.getElementById("otpModal").classList.remove("show");
        document.getElementById("otpInput").value = "";
        document.getElementById("otpMsg").className = "modal-note";
      }


      async function verifyOTP() {
        const otp = document.getElementById("otpInput").value.trim();
        if (!otp) {
          document.getElementById("otpMsg").textContent = "Enter OTP";
          document.getElementById("otpMsg").className = "modal-note error";
          return;
        }
        setLoading("otpBtn", "Verifying");
        const email = document.getElementById("emailOtpInput").value;
        const oldEmail = document.getElementById("oldEmailOtpInput").value;
        try {
          const r = await fetch("/user/profile/api/verify/email/otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email, otp, oldEmail }),
          });
          const out = await r.json();
          if (!r.ok) throw new Error(out.message);
          document.getElementById("otpMsg").textContent =
            "Verified! redirectingâ€¦";
          document.getElementById("otpMsg").className = "modal-note success";
          setTimeout(() => (location.href = "/user/profile/"), 1200);
        } catch (err) {
          document.getElementById("otpMsg").textContent =
            err.message || "Verification failed";
          document.getElementById("otpMsg").className = "modal-note error";
        } finally {
          clearLoading("otpBtn");
        }
      }


      let cropper, avatarBlob;

      document.getElementById('avatarInput').addEventListener('change', e=>{
        const file = e.target.files[0];
        if(!file) return;
        const url = URL.createObjectURL(file);
        document.getElementById('cropImg').src = url;
        openCrop();
        // delay to let image load
        setTimeout(()=>{
          cropper && cropper.destroy();
          cropper = new Cropper(document.getElementById('cropImg'),{
            aspectRatio:1,viewMode:1,background:false
          });
        },50);
      });

      function openCrop(){
        document.getElementById('cropModal').classList.add('show');
      }


      function closeCrop(){
        cropper && cropper.destroy();cropper=null;
        document.getElementById('cropModal').classList.remove('show');
        document.getElementById('avatarInput').value = ''; // reset
      }




async function cropAndSave(e) {

  e.preventDefault();
  if (!cropper) return;

  setLoading('cropSaveBtn', 'Processing');

  cropper.getCroppedCanvas({ width: 300, height: 300 }).toBlob((b) => {
    
    avatarBlob = b;
    const previewEl = document.getElementById('avatarPreview');
    const imgUrl = URL.createObjectURL(b);

    if (previewEl.tagName === 'DIV') {
      previewEl.innerHTML = `<img src="${imgUrl}" alt="Cropped" />`;
    } else {
      previewEl.src = imgUrl;
    }

    closeCrop();
    clearLoading('cropSaveBtn');

  } , 'image/jpeg', 0.9);


}


    </script>
  </body>
</html>
